{
  
    
        "post0": {
            "title": "Test Blog",
            "content": ". Check .",
            "url": "https://ryanrob327.github.io/csp/week28/2023/03/30/test.html",
            "relUrl": "/week28/2023/03/30/test.html",
            "date": " • Mar 30, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Data Structures- Hashmaps, Sets, Hash Tables, Hashing and Collisions",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure that with a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python there is a built in hashtable known as a Dictionaries. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is constant. | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([1, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? # The output only shows unique values # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # Sets and hashmaps are used to manipulate or organize data. Also they both cannot have duplicates. . {1, 2, 3} . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . lover_album = { &quot;title&quot;: &quot;Lover&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;], &quot;tracks&quot;: { 1: &quot;I Forgot That You Existed&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Lover&quot;, 4: &quot;The Man&quot;, 5: &quot;The Archer&quot;, 6: &quot;I Think He Knows&quot;, 7: &quot;Miss Americana &amp; The Heartbreak Prince&quot;, 8: &quot;Paper Rings&quot;, 9: &quot;Cornelia Street&quot;, 10: &quot;Death By A Thousand Cuts&quot;, 11: &quot;London Boy&quot;, 12: &quot;Soon You&#39;ll Get Better (feat. Dixie Chicks)&quot;, 13: &quot;False God&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Afterglow&quot;, 16: &quot;Me! (feat. Brendon Urie of Panic! At The Disco)&quot;, 17: &quot;It&#39;s Nice To Have A Friend&quot;, 18: &quot;Daylight&quot; } } # What data structures do you see? # Dictionary/hashmap and one list nested in the dictionary # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}} . print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) . {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} . print(lover_album.get(&#39;tracks&#39;)[4]) # or print(lover_album[&#39;tracks&#39;][4]) . The Man The Man . lover_album[&quot;producer&quot;] = set([&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]) # What can you change to make sure there are no duplicate producers? # use a set to remove duplicates # Printing the dictionary print(lover_album[&quot;producer&quot;]) . {&#39;Jack Antonoff&#39;, &#39;Louis Bell&#39;, &#39;Taylor Swift&#39;, &#39;Frank Dukes&#39;, &#39;Joel Little&#39;} . lover_album[&quot;tracks&quot;].update({19: &quot;All Of The Girls You Loved Before&quot;}) # How would add an additional genre to the dictionary, like electropop? # use the &quot;append&quot; function on the &quot;genre&quot; key in the dictionary # Printing the dictionary print(lover_album[&quot;tracks&quot;].get(19)) . All Of The Girls You Loved Before . for k,v in lover_album.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) # Write your own code to print tracks in readable format for i in lover_album.get(&quot;tracks&quot;): print(i, lover_album.get(&quot;tracks&quot;).get(i)) . title: Lover artist: Taylor Swift year: 2019 genre: [&#39;Pop&#39;, &#39;Synth-pop&#39;] tracks: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;} producer: {&#39;Jack Antonoff&#39;, &#39;Louis Bell&#39;, &#39;Taylor Swift&#39;, &#39;Frank Dukes&#39;, &#39;Joel Little&#39;} 1 I Forgot That You Existed 2 Cruel Summer 3 Lover 4 The Man 5 The Archer 6 I Think He Knows 7 Miss Americana &amp; The Heartbreak Prince 8 Paper Rings 9 Cornelia Street 10 Death By A Thousand Cuts 11 London Boy 12 Soon You&#39;ll Get Better (feat. Dixie Chicks) 13 False God 14 You Need To Calm Down 15 Afterglow 16 Me! (feat. Brendon Urie of Panic! At The Disco) 17 It&#39;s Nice To Have A Friend 18 Daylight 19 All Of The Girls You Loved Before . def search(): search = input(&quot;What would you like to know about the album?&quot;) if lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) elif search == &quot;tracks&quot;: search = int(input(&quot;What track would you like?&quot;)) print(search) print(lover_album.get(&quot;tracks&quot;).get(search)) else: print(lover_album.get(search.lower())) search() # This is a very basic code segment, how can you improve upon this code? # Added feature to look up song in dictionary . 4 The Man . Hacks . Answer ALL questions in the code segments | Create a diagram or comparison illustration (Canva). What are the pro and cons of using this data structure? | Dictionary vs List | . | Expand upon the code given to you, possible improvements in comments | Build your own album showing features of a python dictionary | For Mr. Yeung&#39;s class: Justify your favorite Taylor Swift song, answer may effect seed style | . | . from IPython.display import Image Image(filename=&#39;images/Lists vs. Dictionaries.png&#39;) . Gorillaz_songs = { # Dictionary with all of my top 10 Gorillaz songs in order 1: &quot;Feel Good Inc.&quot;, 2: &quot;Clint Eastwood&quot;, 3: &quot;Latin Simone&quot;, # removed on apple music :( 4: &quot;Rhinestone Eyes&quot;, 5: &quot;Dare&quot;, 6: &quot;Pac-Man&quot;, 7: &quot;The Pink Phantom&quot;, 8: &quot;5-4&quot;, 9: &quot;19-2000&quot;, 10: &quot;Empire Ants&quot; } def get_song(song): if Gorillaz_songs.get(song) == None: print(&quot;Invalid Search&quot;) else: print(Gorillaz_songs.get(song)) song = int(input(&quot;what placement are you looking for?&quot;)) print(song) get_song(song) . 1 Feel Good Inc. . T-Swift . The best T-Swift is arguably &quot;Blank Space&quot; from its infectious melody to its clever lyrics and overall quality. The song, which was released in 2014, showcases Swift&#39;s ability to blend elements of pop and electronic music with her country roots. Lyrically, the song offers a satirical commentary on Swift&#39;s public persona as a serial dater, as she takes on the role of a man-eating character in the music video. The song&#39;s catchy chorus and Swift&#39;s dynamic vocal range make it an unforgettable hit. With its sharp lyrics and catchy beats, &quot;Blank Space&quot; has earned its place in my heart. .",
            "url": "https://ryanrob327.github.io/csp/2023/03/29/DS-hashmaps.html",
            "relUrl": "/2023/03/29/DS-hashmaps.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Boolean algebra and logic gates",
            "content": "Boolean Algrebra . Boolean algebra is different from elementary algebra as the latter deals with numerical operations and the former deals with logical operations. Elementary algebra is expressed using basic mathematical functions, such as addition, subtraction, multiplication, and division, whereas Boolean algebra deals with conjunction, disjunction, and negation. In binary 1 = true and 0 = false. . Operations . Operations of boolean algebra are: . AND operation (denoted A⋅B) | OR operation (denoted A+B) | NOT operation (denoted A’) | . AND . Boolean multiplication corresponds to the logical function of an “AND” gate, as well as to series switch contacts: . . OR . Boolean addition corresponds to the logical function of an “OR” gate, as well as to parallel switch contacts: . . NOT . Boolean complementation finds equivalency in the form of the NOT gate, or a normally-closed switch or relay contact: . . Logic Operations . NOT AND OR . 0’ = 1 | 0 ⋅ 0 = 0 | 0 + 0 = 0 | . 1’ = 0 | 0 ⋅ 1 = 0 | 0 + 1 = 1 | .   | 1 ⋅ 0 = 0 | 1 + 0 = 1 | .   | 1 ⋅ 1 = 1 | 1 + 1 = 1 | . Properties of Boolean Algebra . Annulment law – a variable ANDed with 0 gives 0, while a variable ORed with 1 gives 1, i.e., . A ⋅ 0 = 0 A + 1 = 1 . Identity law – in this law variable remain unchanged it is ORed with ‘0’ or ANDed with ‘1’, i.e., . A ⋅ 1 = A A + 0 = A . Idempotent law – a variable remains unchanged when it is ORed or ANDed with itself, i.e., . A + A = A A ⋅ A = A . Complement law – in this Law if a complement is added to a variable it gives one, if a variable is multiplied with its complement it results in ‘0’, i.e., . A + A&#39; = 1 A ⋅ A&#39; = 0 . Double negation law – a variable with two negations, its symbol gets cancelled out and original variable is obtained, i.e., . ((A)&#39;)&#39;=A . Commutative law – a variable order does not matter in this law, i.e., . A + B = B + A A ⋅ B = B ⋅ A . Associative law – the order of operation does not matter if the priority of variables are the same like ‘*’ and ‘/’, i.e., . A+(B+C) = (A+B)+C A ⋅ (B ⋅ C) = (A ⋅ B) ⋅ C . Distributive law – this law governs the opening up of brackets, i.e., . A ⋅ (B+C) = (A ⋅ B)+(A ⋅ C) (A+B)(A+C) = A + BC . Absorption law –:-This law involved absorbing similar variables, i.e., . A ⋅ (A+B) = A A + AB = A A+ A&#39;B = A+B A(A&#39; + B) = AB . De Morgan law – the operation of an AND or OR logic circuit is unchanged if all inputs are inverted, the operator is changed from AND to OR, and the output is inverted, i.e., . (A ⋅ B)&#39; = A&#39; + B&#39; (A+B)&#39; = A&#39; ⋅ B&#39; . Hacks . Explain in your own words the functionality of each property of boolean algebra on your own blog | explain the significance of logic gates in modern computing and how boolean algebra relates to it | .",
            "url": "https://ryanrob327.github.io/csp/week27/2023/03/23/Boolean-algebra-and-logic-gates.html",
            "relUrl": "/week27/2023/03/23/Boolean-algebra-and-logic-gates.html",
            "date": " • Mar 23, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Data Structures- Space and Time Complexity",
            "content": "Notes . Time Complexity Space Complexity . Time Complexity is defined as the number of times a particular instruction set is executed rather than the total time taken. It is because the total time took also depends on some external factors like the compiler used, processor’s speed, etc. | Space Complexity is the total memory space required by the program for its execution. | . Types Of Time Complexity : . Best Time Complexity Average Time Complexity Worst Time Complexity . Define the input for which algorithm takes less time or minimum time. In the best case calculate the lower bound of an algorithm. Example: In the linear search when search data is present at the first location of large data then the best case occurs. | In the average case take all random inputs and calculate the computation time for all inputs.And then we divide it by the total number of inputs. | Define the input for which algorithm takes a long time or maximum time. In the worst calculate the upper bound of an algorithm. Example: In the linear search when search data is present at the last location of large data then the worst case occurs. | . Space and Time Complexity . Space complexity refers to the amount of memory used by an algorithm to complete its execution, as a function of the size of the input. The space complexity of an algorithm can be affected by various factors such as the size of the input data, the data structures used in the algorithm, the number and size of temporary variables, and the recursion depth. Time complexity refers to the amount of time required by an algorithm to run as the input size grows. It is usually measured in terms of the &quot;Big O&quot; notation, which describes the upper bound of an algorithm&#39;s time complexity. . Why do you think a programmer should care about space and time complexity? . Time complexity of a program determines how fast it can run, for example if you are making a video game and it has bad time complexity, people will not want to play it because of its constant lagging and slowness. | Space complexity is also important because it determines how large a program is, a simple calendar program for example should not be very large because it is a pretty simple program. | . Take a look at our lassen volcano example from the data compression tech talk. The first code block is the original image. In the second code block, change the baseWidth to rescale the image. . from IPython.display import Image, display from pathlib import Path # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) if __name__ == &quot;__main__&quot;: lassen_volcano = image_data(images=[{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}]) image_display(lassen_volcano) . from IPython.display import HTML, display from pathlib import Path from PIL import Image as pilImage from io import BytesIO import base64 # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def scale_image(img): baseWidth = 625 #baseWidth = 1250 #baseWidth = 2500 #baseWidth = 5000 # see the effect of doubling or halfing the baseWidth #baseWidth = 10000 #baseWidth = 20000 #baseWidth = 40000 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data(images = [{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}]) # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (625, 468) -- original image -- . Do you think this is a time complexity or space complexity or both problem? . I think this is a both problem because the process of displaying the image is slow and inefficient. And when the image size gets larger it is even less efficient. | . Big O Notation . Constant O(1) | Linear O(n) | Quadratic O(n^2) | Logarithmic O(logn) | Exponential (O(2^n)) | . numbers = list(range(1000)) print(numbers) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999] . Constant O(1) . Time . An example of a constant time algorithm is accessing a specific element in an array. It does not matter how large the array is, accessing an element in the array takes the same amount of time. Therefore, the time complexity of this operation is constant, denoted by O(1). . print(numbers[263]) ncaa_bb_ranks = {1:&quot;Alabama&quot;,2:&quot;Houston&quot;, 3:&quot;Purdue&quot;, 4:&quot;Kansas&quot;} #look up a value in a dictionary given a key print(ncaa_bb_ranks[3]) . 263 Purdue . Space . This function takes two integer inputs and returns their sum. The function does not create any additional data structures or variables that are dependent on the input size, so its space complexity is constant, or O(1). Regardless of how large the input integers are, the function will always require the same amount of memory to execute. . def sum(a, b): return a + b sum(1, 2) . 3 . Linear O(n) . Time . An example of a linear time algorithm is traversing a list or an array. When the size of the list or array increases, the time taken to traverse it also increases linearly with the size. Hence, the time complexity of this operation is O(n), where n is the size of the list or array being traversed. . for i in numbers: print(i) . Space . This function takes a list of elements arr as input and returns a new list with the elements in reverse order. The function creates a new list reversed_arr of the same size as arr to store the reversed elements. The size of reversed_arr depends on the size of the input arr, so the space complexity of this function is O(n). As the input size increases, the amount of memory required to execute the function also increases linearly. . def reverse_list(arr): n = len(arr) reversed_arr = [None] * n #create a list of None based on the length or arr for i in range(n): reversed_arr[n-i-1] = arr[i] #stores the value at the index of arr to the value at the index of reversed_arr starting at the beginning for arr and end for reversed_arr return reversed_arr reverse_list(numbers) . Quadratic O(n^2) . Time . An example of a quadratic time algorithm is nested loops. When there are two nested loops that both iterate over the same collection, the time taken to complete the algorithm grows quadratically with the size of the collection. Hence, the time complexity of this operation is O(n^2), where n is the size of the collection being iterated over. . for i in numbers: for j in numbers: print(i,j) . Space . This function takes two matrices matrix1 and matrix2 as input and returns their product as a new matrix. The function creates a new matrix result with dimensions m by n to store the product of the input matrices. The size of result depends on the size of the input matrices, so the space complexity of this function is O(n^2). As the size of the input matrices increases, the amount of memory required to execute the function also increases quadratically. . Main take away is that a new matrix is created. | . def multiply_matrices(matrix1, matrix2): m = len(matrix1) n = len(matrix2[0]) result = [[0] * n] * m #this creates the new matrix based on the size of matrix 1 and 2 for i in range(m): for j in range(n): for k in range(len(matrix2)): result[i][j] += matrix1[i][k] * matrix2[k][j] return result print(multiply_matrices([[1,2],[3,4]], [[3,4],[1,2]])) . [[18, 28], [18, 28]] . Logarithmic O(logn) . Time . An example of a log time algorithm is binary search. Binary search is an algorithm that searches for a specific element in a sorted list by repeatedly dividing the search interval in half. As a result, the time taken to complete the search grows logarithmically with the size of the list. Hence, the time complexity of this operation is O(log n), where n is the size of the list being searched. . def binary_search(arr, low, high, target): while low &lt;= high: mid = (low + high) // 2 #integer division if arr[mid] == target: return mid elif arr[mid] &lt; target: low = mid + 1 else: high = mid - 1 target = 263 result = binary_search(numbers, 0, len(numbers) - 1, target) print(result) . 263 . Space . The same algorithm above has a O(logn) space complexity. The function takes an array arr, its lower and upper bounds low and high, and a target value target. The function searches for target within the bounds of arr by recursively dividing the search space in half until the target is found or the search space is empty. The function does not create any new data structures that depend on the size of arr. Instead, the function uses the call stack to keep track of the recursive calls. Since the maximum depth of the recursive calls is O(logn), where n is the size of arr, the space complexity of this function is O(logn). As the size of arr increases, the amount of memory required to execute the function grows logarithmically. . Exponential O(2^n) . Time . An example of an O(2^n) algorithm is the recursive implementation of the Fibonacci sequence. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, starting from 0 and 1. The recursive implementation of the Fibonacci sequence calculates each number by recursively calling itself with the two preceding numbers until it reaches the base case (i.e., the first or second number in the sequence). The algorithm takes O(2^n) time in the worst case because it has to calculate each number in the sequence by making two recursive calls. . def fibonacci(n): if n &lt;= 1: return n else: return fibonacci(n-1) + fibonacci(n-2) print(fibonacci(30)) . 832040 . Space . This function takes a set s as input and generates all possible subsets of s. The function does this by recursively generating the subsets of the set without the first element, and then adding the first element to each of those subsets to generate the subsets that include the first element. The function creates a new list for each recursive call that stores the subsets, and each element in the list is a new list that represents a subset. The number of subsets that can be generated from a set of size n is 2^n, so the space complexity of this function is O(2^n). As the size of the input set increases, the amount of memory required to execute the function grows exponentially. . def generate_subsets(s): if not s: return [[]] subsets = generate_subsets(s[1:]) return [[s[0]] + subset for subset in subsets] + subsets print(generate_subsets([1,2,3])) . [[1, 2, 3], [1, 2], [1, 3], [1], [2, 3], [2], [3], []] . Using the time library, we are able to see the difference in time it takes to calculate the fibonacci function above. . Based on what is known about the other time complexities, hypothesize the resulting elapsed time if the function is replaced. | . import time start_time = time.time() print(fibonacci(34)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) start_time = time.time() print(fibonacci(35)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) . 5702887 Time taken: 3.5767934322357178 seconds 9227465 Time taken: 5.193729877471924 seconds . Hacks . Record your findings when testing the time elapsed of the different algorithms. | Although we will go more in depth later, time complexity is a key concept that relates to the different sorting algorithms. Do some basic research on the different types of sorting algorithms and their time complexity. | . Algorithm Time Complexity . Selection Sort | O(n^2) | . Bubble Sort | O(n^2) | . Insertion Sort | O(n^2) | . Heap Sort | O(nlog(n)) | . Merge Sort | O(n^2) | . Radix Sort | O(nk) | . Why is time and space complexity important when choosing an algorithm? if you have a large complicated program then you will need the most efficient algorithm for that program to run its best. However, efficient algorithms are normally really simple and may not meet all of your needs. | . | Should you always use a constant time algorithm / Should you never use an exponential time algorithm? Explain? most of the time, exponential algorithms are not available to meet your need, and exponential algorithms are still decent in run time. | . | What are some general patterns that you noticed to determine each algorithm&#39;s time and space complexity? to determine the time complexity of a program you can look at the loops, recursion, and data structures used in the program to determine how many steps the program would take to return an answer. | . | . Complete the Time and Space Complexity analysis questions linked below. Practice . Question My answer Correct answer . 1. | O(N + M) time, O(1) space | O(N + M) time, O(1) space | . 2. | O(N*N) | O(N*N) | . 3. | O(nLogn) | O(nLogn) | . 4. | X will always be a better choice for large inputs | X will always be a better choice for large inputs | . 5. | O(log N) | O(log N) | . 6. | Memory | Both of the above | . 7. | By counting the number of primitive operations performed by the algorithm on a given input size. | By counting the number of primitive operations performed by the algorithm on a given input size. | . 8. | O(logkn) | O(logkn) | . 9. | n(n-1) | n(n-1) | . 10. | False | False | .",
            "url": "https://ryanrob327.github.io/csp/week27/2023/03/22/DS-space_time_complexity.html",
            "relUrl": "/week27/2023/03/22/DS-space_time_complexity.html",
            "date": " • Mar 22, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Example database using planes",
            "content": "CRUD . This database stores planes and their stats, it implements CRUD using imperative programming . Create . Importing the necessary modules and create function: . import sqlite3 database = &#39;files/planes.db&#39; def create_design(designation, price, max_speed, designer): conn = sqlite3.connect(database) c = conn.cursor() try: # Execute an SQL command to insert data into a table c.execute(&quot;INSERT INTO planes (designation, price, max_speed, designer) VALUES (?, ?, ?, ?)&quot;, (designation, price, max_speed, designer)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {designation} has been created with the data:&quot;) print((designation, price, max_speed, designer)) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) c.close() conn.close() create_design(&quot;U-2&quot;, 120000000, 475, &quot;Lockheed&quot;) . A new user record U-2 has been created with the data: (&#39;U-2&#39;, 120000000, 475, &#39;Lockheed&#39;) . This function takes four arguments (designation, price, max_speed, and designer) and inserts them into the &quot;designs&quot; table as a new record. . Read . def read_design(id): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries c = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = c.execute(&#39;SELECT * FROM planes&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: if row[0] == id: print(row) # Close the cursor and connection objects c.close() conn.close() read_design(1) . (1, &#39;SR-71&#39;, 34000000, 2200, &#39;Lockheed&#39;) . This function takes a design ID as an argument and returns the record from the &quot;designs&quot; table that matches that ID. . Update . def update_design(design_id, designation=None, price=None, max_speed=None, designer=None): conn = sqlite3.connect(database) c = conn.cursor() update_dict = {} if designation is not None: update_dict[&quot;designation&quot;] = designation if price is not None: update_dict[&quot;price&quot;] = price if max_speed is not None: update_dict[&quot;max_speed&quot;] = max_speed if designer is not None: update_dict[&quot;designer&quot;] = designer update_str = &quot;, &quot;.join([f&quot;{col}=? &quot; for col in update_dict.keys()]) c.execute(f&quot;UPDATE planes SET {update_str} WHERE id=?&quot;, (*update_dict.values(), design_id)) conn.commit() print(read_design(design_id)) c.close() conn.close() update_design(2, None, None, 480, None) . (2, &#39;U-2&#39;, 120000000, 480, &#39;Lockheed&#39;) None . This function takes a design ID and any combination of the other four arguments as keyword arguments. It updates the record in the &quot;designs&quot; table that matches the ID with the new values provided. . Delete . def delete_design(design_id): conn = sqlite3.connect(database) c = conn.cursor() print(read_design(design_id)) c.execute(&quot;DELETE FROM planes WHERE id=?&quot;, (design_id,)) conn.commit() conn.close() delete_design(2) . (2, &#39;U-2&#39;, 120000000, 480, &#39;Lockheed&#39;) None . This function takes a design ID as an argument and deletes the record from the &quot;designs&quot; table that matches that ID. .",
            "url": "https://ryanrob327.github.io/csp/week26/2023/03/16/database-example.html",
            "relUrl": "/week26/2023/03/16/database-example.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . Each Tri 2 Final Project should be an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? . how a database is structured What is the purpose of identity Column in SQL database? | . | assign a value to each row for parsing What is the purpose of a primary key in SQL database? | . | extract data that is visited more than once in a code base What are the Data Types in SQL table? | . | floats, integers, strings, booleans, etc. | . import sqlite3 database = &#39;files/users.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_name&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_uid&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_password&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (4, &#39;_dob&#39;, &#39;DATE&#39;, 0, None, 0) . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? a connection to a data source like an sql database | . | Same for cursor object? allows you to do things in an sql database | . | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? conn is connection object, and cursor is cursor object | . | Is &quot;results&quot; an object? How do you know? &quot;results&quot; calls a function pertaining to an object creating data that makes &quot;results&quot; an object, because results returns all data in the data base in the form of dictionaries nested inside an array | . | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) print(results) # Close the cursor and connection objects cursor.close() conn.close() read() . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$1d6ZbcJJrpddzWhB$7ab2d67b069b14ff47be80f5b94f1008200dfdea834cb88ea8e28731185d96b2&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$v65aZoOrGptPK0nc$9d5d67ce04b1df343654872c7cc550bf9ea064182c9e80edd11ed15f70cc5776&#39;, &#39;2023-03-14&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$lo7pCx0Zg4TfSgNl$e979af3b71ae8160dec0b5714963039fc22630e7918443eaef73f4ba7f1141b5&#39;, &#39;2023-03-14&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$4PRTpXe0iuoJSvZm$009b7c3a5e10daf39c39ce67e55754fec9c84d812a906247bae96975dd5de585&#39;, &#39;2023-03-14&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$tgbuZxPJQYfFCYuN$7f91cee87927dd2c651f584bd6d771e2efc5cfe5eac1b8ea6569684f3098f576&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$GSp3g1h1S7jJZ3KU$fb38dbbc80549d2a8939e7ccb6c94fa5fe74abdc2e38399341a4de4c30a8bf70&#39;, &#39;1921-10-21&#39;) [(1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$1d6ZbcJJrpddzWhB$7ab2d67b069b14ff47be80f5b94f1008200dfdea834cb88ea8e28731185d96b2&#39;, &#39;1847-02-11&#39;), (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$v65aZoOrGptPK0nc$9d5d67ce04b1df343654872c7cc550bf9ea064182c9e80edd11ed15f70cc5776&#39;, &#39;2023-03-14&#39;), (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$lo7pCx0Zg4TfSgNl$e979af3b71ae8160dec0b5714963039fc22630e7918443eaef73f4ba7f1141b5&#39;, &#39;2023-03-14&#39;), (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$4PRTpXe0iuoJSvZm$009b7c3a5e10daf39c39ce67e55754fec9c84d812a906247bae96975dd5de585&#39;, &#39;2023-03-14&#39;), (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$tgbuZxPJQYfFCYuN$7f91cee87927dd2c651f584bd6d771e2efc5cfe5eac1b8ea6569684f3098f576&#39;, &#39;1920-10-21&#39;), (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$GSp3g1h1S7jJZ3KU$fb38dbbc80549d2a8939e7ccb6c94fa5fe74abdc2e38399341a4de4c30a8bf70&#39;, &#39;1921-10-21&#39;)] . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compare create() in both SQL lessons. What is better or worse in the two implementations? in the object oriented implementation, variables are already defined before the &#39;create()&#39; function is made. In this lesson everything must be defined in the function | . | Explain purpose of SQL INSERT. Is this the same as User init? SQL INSERT adds a row to a data table, User init initializes the User class | . | . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() create() . A new user record ryan has been created . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? it shows up if your password is too short | . | Explain try/except, when would except occur? if the password entered is invalid | . | What code seems to be repeated in each of these examples to point, why is it repeated? connecting to database and creating cursor object, these need to be called and closed each time to ensure the database is updated | . | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() update() . The row with user id rob the password has been hacked . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? not unless you make dumb decisions with it, or if your data is lossy | . | In the print statements, what is the &quot;f&quot; and what does {uid} do? &#39;f&#39; means &#39;format&#39;, and allows you to insert variables into a string. | . | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? to read which command has been entered and to respond accordingly | . | Could you refactor this menu? Make it work with a List? yes, I would make each command a dictionary nested in a list, this way you enter in the command as a key, and get the result as a value | . | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In this implementation, do you see procedural abstraction? Yes, each function is an example of procedural abstraction. You can call these functions later in the program to execute a segment of code. One example is the &quot;create&quot; function, when called, this function passes in data for a new row in the data table and uses sqlite to add the data to the users table. | . | In 2.4a or 2.4b lecture Do you see data abstraction? Complement this with Debugging example. Data abstraction is all over this program, each function of CRUD interacts with data, one example is the &quot;create&quot; function. This example shows me debugging the create function, I have a breakpoint right where the function adds the data I just inputted to the data table. | . | Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. | . | . Reference... sqlite documentation . from IPython.display import Image Image(filename=&#39;images/debug example.png&#39;) .",
            "url": "https://ryanrob327.github.io/csp/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Notes . Getters and setters comparable to crud Read --&gt; getter | Create, Update, Delete --&gt; setter | . | . Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. Flask app object After importing, flask is initialized as &quot;app&quot; and is used to configure the following sql database | . | SQLAlchemy db object The last two lines initialize the object and use the object to initialize the flask app | . | | . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///files/sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class, purpose and defintion. class User user class manages action in the &#39;users&#39; data table | . | db.Model inheritance inherited from the database, db.Model connects the object code to a relational database | . | init method initializes variables within object | . | @property, @&lt;column&gt;.setter &quot;@property&quot; creates and returns a property object | &quot;@.setter&quot; sets the value of a property object&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; create, read, update, delete methods methods all interact with a database through an API to utilize data from the database | . | &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts uid from object @property def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional method used for setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter against stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, a string represents date outside object @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob setter, verifies date type before it is set or default to today @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # age is calculated field, age is returned according to date of birth @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . InvalidRequestError Traceback (most recent call last) /home/ryanm/vscode/csp/_notebooks/2023-03-13-AP-unit2-4a.ipynb Cell 7 in &lt;cell line: 17&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/ryanm/vscode/csp/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/ryanm/vscode/csp/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=11&#39;&gt;12&lt;/a&gt; # Define the User class to manage actions in the &#39;users&#39; table &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/ryanm/vscode/csp/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=12&#39;&gt;13&lt;/a&gt; # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/ryanm/vscode/csp/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; # -- a.) db.Model is like an inner layer of the onion in ORM &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/ryanm/vscode/csp/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; # -- b.) User represents data we want to store, something that is built on db.Model &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/ryanm/vscode/csp/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/ryanm/vscode/csp/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; class User(db.Model): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/ryanm/vscode/csp/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; __tablename__ = &#39;users&#39; # table name is plural, class name is singular &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/ryanm/vscode/csp/_notebooks/2023-03-13-AP-unit2-4a.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=19&#39;&gt;20&lt;/a&gt; # Define the User schema with &#34;vars&#34; from object File ~/anaconda3/lib/python3.9/site-packages/flask_sqlalchemy/model.py:67, in NameMetaMixin.__init__(cls, name, bases, d) 64 if should_set_tablename(cls): 65 cls.__tablename__ = camel_to_snake_case(cls.__name__) &gt; 67 super(NameMetaMixin, cls).__init__(name, bases, d) 69 # __table_cls__ has run at this point 70 # if no table was created, use the parent table 71 if ( 72 &#39;__tablename__&#39; not in cls.__dict__ 73 and &#39;__table__&#39; in cls.__dict__ 74 and cls.__dict__[&#39;__table__&#39;] is None 75 ): File ~/anaconda3/lib/python3.9/site-packages/flask_sqlalchemy/model.py:121, in BindMetaMixin.__init__(cls, name, bases, d) 115 def __init__(cls, name, bases, d): 116 bind_key = ( 117 d.pop(&#39;__bind_key__&#39;, None) 118 or getattr(cls, &#39;__bind_key__&#39;, None) 119 ) --&gt; 121 super(BindMetaMixin, cls).__init__(name, bases, d) 123 if bind_key is not None and getattr(cls, &#39;__table__&#39;, None) is not None: 124 cls.__table__.info[&#39;bind_key&#39;] = bind_key File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/decl_api.py:72, in DeclarativeMeta.__init__(cls, classname, bases, dict_, **kw) 69 cls._sa_registry = reg 71 if not cls.__dict__.get(&#34;__abstract__&#34;, False): &gt; 72 _as_declarative(reg, cls, dict_) 73 type.__init__(cls, classname, bases, dict_) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/decl_base.py:126, in _as_declarative(registry, cls, dict_) 121 def _as_declarative(registry, cls, dict_): 122 123 # declarative scans the class for attributes. no table or mapper 124 # args passed separately. --&gt; 126 return _MapperConfig.setup_mapping(registry, cls, dict_, None, {}) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/decl_base.py:177, in _MapperConfig.setup_mapping(cls, registry, cls_, dict_, table, mapper_kw) 174 else: 175 cfg_cls = _ClassScanMapperConfig --&gt; 177 return cfg_cls(registry, cls_, dict_, table, mapper_kw) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/decl_base.py:322, in _ClassScanMapperConfig.__init__(self, registry, cls_, dict_, table, mapper_kw) 318 self._extract_mappable_attributes() 320 self._extract_declared_columns() --&gt; 322 self._setup_table(table) 324 self._setup_inheritance(mapper_kw) 326 self._early_mapping(mapper_kw) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/decl_base.py:811, in _ClassScanMapperConfig._setup_table(self, table) 806 if autoload: 807 table_kw[&#34;autoload&#34;] = True 809 table = self.set_cls_attribute( 810 &#34;__table__&#34;, --&gt; 811 table_cls( 812 tablename, 813 self._metadata_for_cls(manager), 814 *(tuple(declared_columns) + tuple(args)), 815 **table_kw 816 ), 817 ) 818 else: 819 if table is None: File ~/anaconda3/lib/python3.9/site-packages/flask_sqlalchemy/model.py:90, in NameMetaMixin.__table_cls__(cls, *args, **kwargs) 87 key = _get_table_key(args[0], kwargs.get(&#39;schema&#39;)) 89 if key in cls.metadata.tables: &gt; 90 return sa.Table(*args, **kwargs) 92 # if a primary key or constraint is found, create a table for 93 # joined-table inheritance 94 for arg in args: File &lt;string&gt;:2, in __new__(cls, *args, **kw) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/util/deprecations.py:309, in deprecated_params.&lt;locals&gt;.decorate.&lt;locals&gt;.warned(fn, *args, **kwargs) 302 if m in kwargs: 303 _warn_with_version( 304 messages[m], 305 versions[m], 306 version_warnings[m], 307 stacklevel=3, 308 ) --&gt; 309 return fn(*args, **kwargs) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/sql/schema.py:584, in Table.__new__(cls, *args, **kw) 582 if key in metadata.tables: 583 if not keep_existing and not extend_existing and bool(args): --&gt; 584 raise exc.InvalidRequestError( 585 &#34;Table &#39;%s&#39; is already defined for this MetaData &#34; 586 &#34;instance. Specify &#39;extend_existing=True&#39; &#34; 587 &#34;to redefine &#34; 588 &#34;options and columns on an &#34; 589 &#34;existing Table object.&#34; % key 590 ) 591 table = metadata.tables[key] 592 if extend_existing: InvalidRequestError: Table &#39;users&#39; is already defined for this MetaData instance. Specify &#39;extend_existing=True&#39; to redefine options and columns on an existing Table object. . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? Create All Tables from db Object &quot;db.create_all()&quot; creates database with required tables | . | User Object Constructors calling the &quot;User&quot; object, inputting data, and adding that data to the database | . | Try / Except tries creating &quot;User&quot; object as row in table, if an error occurs, the &quot;except&quot; code catches the error and reports it in a print statement | . | | . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Created new uid toby Created new uid niko Created new uid lex Created new uid whit Created new uid indi Created new uid raven . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following User.query.filter_by filters through users based on the user id, returns first user id | . | user.password returns password of user, &quot;user.is_password&quot; verifies the password | . | | . def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following user.find_by_uid() and try/except filters through database for user id, if found, the try method prints that it is found, otherwise, the except method keeps searching through the database | . | user = User(...) initializes &quot;User&quot; class with data inputted | . | user.dob and try/except asks user for dob, if dob entered correctly, moves on, otherwise, returns error, prompts user to enter dob again | . | user.create() and try/except tries to create user object, if not possible, returns error message with incorrect user id | . | | . def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dob}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following User.query.all queries all data columns in database | . | json_ready assignment, google List Comprehension json_ready calls &quot;read&quot; method for data in user | . | | . # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Change blog to your own database. | Add additional CRUD Add Update functionality to this blog. | Add Delete functionality to this blog. | . | . &lt;/div&gt; | . | . | .",
            "url": "https://ryanrob327.github.io/csp/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Notes . Pandas allows for easy organization and reading of data | Datasets must be clean before feeding them to a computer this can be improved with pandas | . | When creating or using a dataset you must consider; Does it have a good sample size? | Is there bias in the data? | Does the data set need to be cleaned? | What is the purpose of the data set? | . | . Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . This code defines &#39;df&#39;(dataframe) by getting the data from &#39;grade.json&#39; | . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # The grades need to be checked, and the student id needs to not be &quot;nil&quot; # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? # you should really check the input because bad input creates bad output . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . This code uses data from the .json file; &#39;grade.json&#39; to output the student ID&#39;s and GPA&#39;s with or without an index | . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA 123 3.57 246 4.00 578 2.78 469 3.45 324 4.75 313 3.33 145 2.95 167 3.90 235 3.15 nil 2.80 469 3.45 456 2.75 . DataFrame Sort . The following code hows to output data by sorting from ascending or descending order by using the &#39;sort_values&#39; function. | . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 Student ID Year in School GPA 4 324 Junior 4.75 1 246 10 4.00 7 167 10 3.90 0 123 12 3.57 3 469 11 3.45 10 469 11 3.45 5 313 20 3.33 8 235 9th Grade 3.15 6 145 12 2.95 9 nil 9 2.80 2 578 12 2.78 11 456 10 2.75 . DataFrame Selection or Filter . This simple code only prints data with GPA greater than 3.00 | . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . DataFrame Selection Max and Min . similarly to the last code block, this code block selectively only displays the maximum and minimum GPA&#39;s. | . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . This code block uses the pandas module to create a dataset from scratch, then the data is printed below. | . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390, 100000], &quot;duration&quot;: [50, 40, 45, 1], &quot;before&quot;: [150, 139, 176, 200], &quot;after&quot;: [148, 138, 175, 1] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;, &quot;day4&quot;]) print(df) . -Dict_to_DF calories duration before after 0 420 50 150 148 1 380 40 139 138 2 390 45 176 175 3 100000 1 200 1 -Dict_to_DF_labels-- calories duration before after day1 420 50 150 148 day2 380 40 139 138 day3 390 45 176 175 day4 100000 1 200 1 . Examine DataFrame Rows . This code block allows you to select specific data variables. | . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . -Examine Selected Rows calories duration before after day1 420 50 150 148 day3 390 45 176 175 --Examine Single Row-- calories 420 duration 50 before 150 after 148 Name: day1, dtype: int64 . Pandas DataFrame Information . this code block uses the &#39;info&#39; function to provide information like length of the data frame, data-types, and memory usage. | . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 3 entries, day1 to day3 Data columns (total 4 columns): # Column Non-Null Count Dtype -- -- 0 calories 3 non-null int64 1 duration 3 non-null int64 2 before 3 non-null int64 3 after 3 non-null int64 dtypes: int64(4) memory usage: 228.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . This code block uses the panda module to read the &#39;data.csv&#39; file and output the data based on the duration of the workout. | . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . This code block gets data from a covid API and displays it below, it looks like a database because the information comes from a database and is displayed below. | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . country_name cases deaths 0 USA 82,649,779 1,018,316 1 India 43,057,545 522,193 2 Brazil 30,345,654 662,663 3 France 28,244,977 145,020 4 Germany 24,109,433 134,624 5 UK 21,933,206 173,352 . Hacks . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Fambulous. | . When choosing a data set, think about the following:- Does it have a good sample size? - Is there bias in the data? - Does the data set need to be cleaned? - What is the purpose of the data set? - ... . Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) | . College board questions . Question answer . 1. Which of the following is an advantage of a lossless compression algorithm over a lossy compression algorithm? | B. A lossless compression algorithm can guarantee reconstruction of original data, while a lossy compression algorithm cannot. | . 2. A user wants to save a data file on an online storage site. The user wants to reduce the size of the file, if possible, and wants to be able to completely restore the file to its original version. Which of the following actions best supports the user’s needs? | A. Compressing the file using a lossless compression algorithm before uploading it | . 3. A programmer is developing software for a social media platform. The programmer is planning to use compression when users send attachments to other users. Which of the following is a true statement about the use of compression? | C. Lossy compression of an image file generally provides a greater reduction in transmission time than lossless compression does. | . Yahoo Finance Dataset . This code uses the data from yahoo finance and functions from pandas to display the maximum, minimum, median, and mean stock prices from Apple in the last quarter. As well as displaying all stock data at the end. . import pandas as pd import yfinance as yf # Set the ticker symbol and date range ticker = &quot;AAPL&quot; start_date = &quot;2022-12-01&quot; end_date = &quot;2023-02-28&quot; # Get the stock data from Yahoo Finance data = yf.download(ticker, start=start_date, end=end_date) # Calculate the mean and median closing prices for the last quarter mean_price = data[&quot;Close&quot;].mean() median_price = data[&quot;Close&quot;].median() min_price = data[&quot;Close&quot;].min() max_price = data[&quot;Close&quot;].max() # Print the results print(f&quot;Mean price for {ticker} in the last quarter: ${mean_price:.2f}&quot;) print(f&quot;Median price for {ticker} in the last quarter: ${median_price:.2f}&quot;) print(f&quot;Minimum price for {ticker} in the last quarter: ${min_price:.2f}&quot;) print(f&quot;Maximum price for {ticker} in the last quarter: ${max_price:.2f}&quot;) print(f&quot;data for {ticker} in the last quarter: &quot;) print(data[&quot;Close&quot;]) . [*********************100%***********************] 1 of 1 completed Mean price for AAPL in the last quarter: $141.22 Median price for AAPL in the last quarter: $142.65 Minimum price for AAPL in the last quarter: $125.02 Maximum price for AAPL in the last quarter: $155.33 data for AAPL in the last quarter: Date 2022-12-01 148.309998 2022-12-02 147.809998 2022-12-05 146.630005 2022-12-06 142.910004 2022-12-07 140.940002 2022-12-08 142.649994 2022-12-09 142.160004 2022-12-12 144.490005 2022-12-13 145.470001 2022-12-14 143.210007 2022-12-15 136.500000 2022-12-16 134.509995 2022-12-19 132.369995 2022-12-20 132.300003 2022-12-21 135.449997 2022-12-22 132.229996 2022-12-23 131.860001 2022-12-27 130.029999 2022-12-28 126.040001 2022-12-29 129.610001 2022-12-30 129.929993 2023-01-03 125.070000 2023-01-04 126.360001 2023-01-05 125.019997 2023-01-06 129.619995 2023-01-09 130.149994 2023-01-10 130.729996 2023-01-11 133.490005 2023-01-12 133.410004 2023-01-13 134.759995 2023-01-17 135.940002 2023-01-18 135.210007 2023-01-19 135.270004 2023-01-20 137.869995 2023-01-23 141.110001 2023-01-24 142.529999 2023-01-25 141.860001 2023-01-26 143.960007 2023-01-27 145.929993 2023-01-30 143.000000 2023-01-31 144.289993 2023-02-01 145.429993 2023-02-02 150.820007 2023-02-03 154.500000 2023-02-06 151.729996 2023-02-07 154.649994 2023-02-08 151.919998 2023-02-09 150.869995 2023-02-10 151.009995 2023-02-13 153.850006 2023-02-14 153.199997 2023-02-15 155.330002 2023-02-16 153.710007 2023-02-17 152.550003 2023-02-21 148.479996 2023-02-22 148.910004 2023-02-23 149.399994 2023-02-24 146.710007 2023-02-27 147.919998 Name: Close, dtype: float64 .",
            "url": "https://ryanrob327.github.io/csp/2023/03/09/AP-unit2-3.html",
            "relUrl": "/2023/03/09/AP-unit2-3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Test 3 Corrections",
            "content": "Corrections . question what I did wrong correct answer . 3 | I incorrectly assumed that storing information in the call session database makes it easy for individuals to trick the system using malicious links. | Customers’ personal information could be compromised if an unauthorized individual gains access to the call session database. | . 5 | I incorrectly thought that the least likely thing to be provided by the upgraded system was human representatives will not be needed to respond to some inquiries. | The company will be able to provide a human representative for any incoming call. | . 29 | I did not realize that the fifth statement assigns the value false to c. | false false false | . 40 | I flipped my rights and lefts, I could have turned the image upside-down to see what it should look like. | No change is needed; the algorithm is correct as is. | . 41 | I incorrectly assumed that the genetic codes must be converted from binary to decimal numbers, but the values can be stored in any numerical base as long as they are sorted. | The list must be sorted based on the genetic code values. | . 48 | I incorrectly selected one of the two answers for the second one but The process of developing an abstract simulation involves removing specific details or simplifying functionality. | A simulation allows investigation of a phenomenon without the real-world limitations on time, safety, or budget. | . 50 | Once again, I incorrectly selected one of the two options but the real answer is different because as the size of the list grows, the number of steps needed to sort the list grows at an exponential rate, as the number of steps is equal to 2n for a list of size n. This indicates that the algorithm does not run in a reasonable amount of time. | Algorithm D | . Reflection . The biggest issue I ran into was my lack of reviewing the course material. To make sure I have a strong understanding of the course material, including the concepts and skills covered in the curriculum. take notes on the videos and other resources to ensure I have a solid grasp of the material. I also think it would be helpful to take more practice tests, especially as the exam approaches. .",
            "url": "https://ryanrob327.github.io/csp/week25/2023/03/08/CB-test-3-corrections.html",
            "relUrl": "/week25/2023/03/08/CB-test-3-corrections.html",
            "date": " • Mar 8, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "from IPython.display import Image Image(filename=&#39;images/smiley.jpg&#39;) . Notes . Lossy - data lost cannot be recovered . Lossless - data lost can be recovered . Pros Cons . Lossy | Small file sizes. Ideal for web use. Lots of tools, plugins and software support it. | Quality degrades due to higher rate of compression. | . Lossless | No loss in quality. Slight decreases in file sizes. | Compressed files are larger than lossy files. | . Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. - Clouds Impression . Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Python Libraries and Concepts used for Jupyter and Files/Directories . Introduction to displaying images in Jupyter notebook . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? &quot;cd&quot; command allows you to access files, &quot;ls&quot; allows you to view files, &quot;rm&quot; allows you to delete files, and there are many more commands to interact with files | . | What are the command you use in Windows terminal to access files? &quot;cd&quot; command allows you to access files, &quot;dir&quot; allows you to view files, &quot;rd&quot; allows you to delete files, and there are many more commands to interact with files | . | What are some of the major differences? The largest difference between windows commands and ubuntu commands is in the syntax, when code uses commands in order to run, different syntax will break the requirements of this code. | . | . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? Without accessing images you cannot display/use them, and without path you cannot access images on all OS&#39;s | . | How does the meta data source and label relate to Unit 5 topics? This allows you to track images on the internet and find the source of images | . | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? IPython allows for easy manipulation of data, in the context of images, it allows you to store them efficiently and manipulate them easily. | . | . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) smiley = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;smiley&quot;, &#39;file&#39;: &quot;smiley.jpg&quot;}]) image_display(smiley) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Translate first 3 letters of your name to Base64. | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? Most often this happens to me on video streaming websites like youtube, or vimeo | . | From your consumer experience, what effects have you experienced from buffering? slower videos, longer loading times, more ram usage | . | How do these effects apply to images? images load slower but more efficiently | . | . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? yes, the steps seem to be printing the meta data, displaying the regular image, and displaying the grey scale image. | . | Describe Grey Scale algorithm in English or Pseudo code? For Each Pixel in Image { | . | . Red = Pixel.Red; Green = Pixel.Green; Blue = Pixel.Blue; . Gray = (Red + Green + Blue) / 3 . Pixel.Red = Gray; Pixel.Green = Gray; Pixel.Blue = Gray; . } . Describe scale image? What is before and after on pixels in three images? scale image increases or decreases the size of each pixel in an image, first image is scaled up, second and third images are scaled down and compressed. | . | Is scale image a type of compression? If so, line it up with College Board terms described? Scale image down normally lossy compression by lowering the resolution of the image. | . | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- original image -- . grey image - . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- original image -- . grey image - . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- original image -- . grey image - . . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia both use classes and definitions to support procedural programming | . | Consider how data is organized in two examples, in relations to procedures relational databases organize data into rows and columns in the form of a table and then is structured across multiple tables to do something | . | Look at Parameters in Imperative and Self in OOP . | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL adds support for opening, manipulating, and saving many different image file formats. PIL provides a set of standard image processing algorithms like resizing, cropping, filtering, and enhancing images | . | numpy support for large, multi-dimensional arrays and matrices, as well as a wide range of mathematical operations that can be performed on these arrays | . | base64 In Python, the base64 module provides functions for encoding and decoding data using the base64 scheme | . | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . - meta data -- Green Square Internet green-square-16.png PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- scaled image -- . grey image . - meta data -- Clouds Impression Peter Carolin clouds-impression.png PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- scaled image -- . grey image . - meta data -- Lassen Volcano Peter Carolin lassen-volcano.jpg JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- scaled image -- . grey image . . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | . red scale with numpy and PIL . import numpy as np from PIL import Image # Load image img = Image.open(&quot;images/smiley.jpg&quot;) # Convert image to NumPy array img_array = np.array(img) # Create a copy of the array to manipulate red_array = img_array.copy() # Set green and blue channels to zero red_array[:,:,1] = 0 red_array[:,:,2] = 0 # Multiply red channel by scalar value red_array[:,:,0] = red_array[:,:,0] * 1.5 # Convert NumPy array back to image red_img = Image.fromarray(np.uint8(red_array)) # Display the image red_img.show() .",
            "url": "https://ryanrob327.github.io/csp/week25/2023/03/07/AP-unit2-2.html",
            "relUrl": "/week25/2023/03/07/AP-unit2-2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "CPT grades",
            "content": "Arnav’s grades . Student Crossover: 8/7 . requirement points . 1. UI project quality | 1 | . 2. UI validated for garbage | 1 | . 3. UI Create, Read | 1 | . 4. UI Update, Delete | 0 (optional) | . 5. BE code quality | 1 | . 6. BE error conditions | 1 | . 7. BE GET and POST | 1 | . 8. BE Create, Read | 1 | . 9. BE Update, Delete | 1 (optional) | . Review Ticket: 3/3 . requirement points . 1. Review Ticket / Presentation | .5 | . 2. Runtime Links | .5 | . 3. Technical Achievements, backend focus | .5 | . 4. Guides for Review | .5 | . 5. Video | 0 | . 6. GitHub analytics | .5 | . 7. Bonus, substitute and personal achievement | .5 | . Khalid’s grades . Student Crossover:8/7 . requirement points . 1. UI project quality | 1 | . 2. UI validated for garbage | 1 | . 3. UI Create, Read | 1 | . 4. UI Update, Delete | 0 (optional) | . 5. BE code quality | 1 | . 6. BE error conditions | 1 | . 7. BE GET and POST | 1 | . 8. BE Create, Read | 1 | . 9. BE Update, Delete | 1 (optional) | . Review Ticket: 2.5/3 . requirement points . 1. Review Ticket / Presentation | .5 | . 2. Runtime Links | .5 | . 3. Technical Achievements, backend focus | .5 | . 4. Guides for Review | .5 | . 5. Video | 0 | . 6. GitHub analytics | .5 | . 7. Bonus, substitute and personal achievement | 0 | .",
            "url": "https://ryanrob327.github.io/csp/week24/2023/02/27/CPT-grades.html",
            "relUrl": "/week24/2023/02/27/CPT-grades.html",
            "date": " • Feb 27, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "N@M trimester 2",
            "content": "Computer science experience . When I first got arrived at 6:00 I went to A101 to see what cool websites other periods had created. . Metric units converter . . The first group I looked at made a website to convert metric units to imperial for cooking purposes. Unfortunately they did not have the website deployed but they did have a working product with frontend and backend communicating. I like their project because it was simple and seemed like it would be in the scope of the N@M deadline. . Vacation planner . . The next group I looked at was from the APCSA class and they made a website to help plan out your vacations. The website worked very nice, it was deployed, and the frontend was communicating with the backend, the aspect I liked most was their quiz to test your knowledge of geography. What I admired the most about their group was how they organized their project to have it done in time, their were many things that I learned by talking with their scrum master. . Failed deployment . . The final group I visited before needing to leave for jazz band was having trouble with their website deployment. . Jazz band experience . Now it was almost 6:30 and my friends were texting me to get over to the band room because it was almost time to go on stage. I quickly made my way over, warmed up, and reached the stage to play our first tune; “You must believe in spring” with me on lead trumpet. . . In the second half of our performance, we played “Games”, a more fast paced tune than the former. . Reflection . Even though N@M was a little chaotic for me having to run back and forth between jazz band and computer science, it was definitely the most fun I have had at a N@M. In the computer science room I got to see what lots of other people did and by speaking to many people that did better than my group I was able to learn a lot. For example, one of the challenges of my group’s project is how much larger and more complicated it is than most other groups. But by talking to other students with more experience, I learned techniques to speed up project development and finish in time. Finally, it was really fun having this opportunity to play music with band friends and experience the work of other computer science friends. .",
            "url": "https://ryanrob327.github.io/csp/week23/2023/02/17/N@M-tri-2.html",
            "relUrl": "/week23/2023/02/17/N@M-tri-2.html",
            "date": " • Feb 17, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "CPT Outline",
            "content": "Project Plan . Category How my Project meets criteria . Program Purpose and Function | Website allows people to input their information to create a profile and match with other people | . Data Abstraction | The backend framework stores data in dictionaries correlating to the type of information being stored which itself is stored in a larger list containing a dictionary for each individual | . Managing Complexity | Data in the list is gathered when the user logs in by matching the inputted email and password with the emails and passwords of the stored data | . ProceduralAbstraction | Many procedures are used to read, create, and update data, one example is the update display name function which allows the user to change their name in their profile | . Algorithm Implementation | The match functionality of the program uses iteration to go through each user in the database and select users based on the personality quiz that they took | . Testing | in the profile page you can edit your profile details by passing different parameters into a function, and in the sign up page you can create different details by passing in those parameters into a different function. | .",
            "url": "https://ryanrob327.github.io/csp/week23/2023/02/09/CPT-Outline.html",
            "relUrl": "/week23/2023/02/09/CPT-Outline.html",
            "date": " • Feb 9, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Licenses and safe computing",
            "content": "Safe Computing . Aspects like logging in and signing up create PII in CSP . | I am strongly against PII, I believe that no one on the internet needs to know anything about me except basic information like my name or email even if it is only being used to improve advertisement. it is helpful to know if your information has been leaked because you can check https://haveibeenpwned.com/ to tell . | The best password uses multiple non-alphanumeric characters but still makes sense for you to remember it, another great idea is to enable two-factor authentication. . | Symmetric encryption uses a unique key that must be shared between the people who need to receive the message, while asymmetric encryption uses a pair of public keys and a private key to encrypt and decrypt messages when they are communicated. . | AES-256 is used in aws server-side encryption . | Personally, I have never been affected by a phishing scheme because I never click on links that I don’t trust . | License . Creative Commons Zero v1.0 Universal . Makes your work available on the public domain | . Open Source MIT License . Gives credit to the author(s) of the licensed project | . Open Source GPL License . Lets you do anything except distribute closed source software | . Copy rights can allow people online to monetize their work and make a living for what they do without others stealing their work. However, copyright laws can be abused to steal the money from creators online that may unknowingly use copyright protected content. . | The MIT license that we use for our project allows for open source projects, additionally, we will never make this project available to a large amount of people for financial gain so we do not need to worry about any legal implications affiliated with selling a service. . |",
            "url": "https://ryanrob327.github.io/csp/week22/2023/02/08/Licenses.html",
            "relUrl": "/week22/2023/02/08/Licenses.html",
            "date": " • Feb 8, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Crowd Sourcing and computer bias",
            "content": "Computer Bias . Computer bias describes systematic and repeatable errors in a computer system that create “unfair” outcomes, such as “privileging” one category over another in ways different from the intended function of the algorithm. Computer bias has been observed in search engine results and social media platforms. This bias can have impacts ranging from inadvertent privacy violations to reinforcing social biases of race, gender, sexuality, and ethnicity. due to biased data and/or unfair treatment of certain groups. This bias can greatly influence the decisions made by these systems and perpetuate existing societal biases and discrimination. For example, a facial recognition system trained on a biased dataset may have higher error rates for . Crowd Sourcing . With 150 students, the csp classroom on the Del Norte campus has plenty of opportunity for crowdsourcing, students can use crowd sourcing in their projects to get work done at a faster rate by using data inputted by other students or people using their program. The use of crowd sourcing depends on the individuals project requirements, for example, in my project we need people to enter in information about themselves and create an account for our dating site otherwise we could not populate an entire dating site with accounts ourselves. .",
            "url": "https://ryanrob327.github.io/csp/week21/2023/02/01/Crowd-Sourcing.html",
            "relUrl": "/week21/2023/02/01/Crowd-Sourcing.html",
            "date": " • Feb 1, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Beneficial and Harmful Effects of Technology",
            "content": "Communication . Modern technology allows people to communicate with each other instantly, be it through calls, text, email, or the internet. This is helpful when you are scientists working from different countries on the same project, a person who works from home, or rescue personnel in a natural disaster situation. However instant communication may not always be such a good thing, one negative is cyber bullying, often young impressionable people are the targets of cyber bullying . Improved Efficiency . We can perform more tasks in less time. From shared drives to emails, communication, coordination, execution and implementation of a lot of business processes has become swift and hassle-free, all thanks to technology. However technology may also cause more stress when you are expected to do more complex work. . Dependability . The biggest disadvantage of technology is how much we depend on it. And a minor lapse in the functioning can create a situation that cannot be controlled. So, a minor malfunction may cause a complete can cost a human life as well. For example look at the Y2K panic or the blackout across Texas . Dopamine . The dopamine impact is a real thing, every day when I go to school, no matter what period it is, I can always see at least one person in my class on their phone, and normally it is one of the people failing the class. Addiction to your phone draws your attention away from the real world, I was there once, but eventually I learned that to combat addiction to my technology I have to set time limits, create a schedule, and step outside to connect to the real world often. .",
            "url": "https://ryanrob327.github.io/csp/week20/2023/01/24/effects-of-tech.html",
            "relUrl": "/week20/2023/01/24/effects-of-tech.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "MCQ Test 2 corrections",
            "content": "Problems . Q8 - Laptops being borrowed from a school library . My mistake was only selecting one answer when the question said there are multiple | This can be fixed by reviewing my work after completing the test | . Q13 - old enough to drive but not to vote . My mistake was believing that the age could be greater than or equal to 16 when it was really just greater than 16 | To fix this problem I should spend more time thinking through the logic of my answers before submitting them | . Q28 - Robot in bottom right corner of grid . Once again my mistake was only selecting one answer when the question said there are multiple | This can be fixed by reviewing my work after completing the test and reading the directions more attentively | . Q30 - use drawCircle to draw figure on a coordinate grid . Once again my mistake was only selecting one answer when the question said there are multiple | This can be fixed by reviewing my work after completing the test and reading the directions more attentively | . Q42 - Car manufacturer simulations . this question had all options as correct, I did no think this was possible and because my knowledge of simulations is limited I only selected what I thought was correct | from this question I have learned that college board will make trick questions to throw you off, and you must carefully review directions to ensure the questions are correct | . Q45 - Benefits of a heuristic solution . This problem asked questions about heuristic solutions which I am not entirely familiar with | to fix this in the future I will do more review by creating a list of all topics on the test and going over them extra times | . Reflection . The results of this test were decent but still worse than expected, my biggest problem is that I do not spend enough time to review my answers and think through the logic of my choices twice. However, on the AP test I will need to be able to answer these questions quickly. To accomplish this I will need to spend extra time studying the course material so that when the AP test comes around I will already be familiar with the types of questions and topics. .",
            "url": "https://ryanrob327.github.io/csp/week20/2023/01/24/MCQ-Test-2-corrections.html",
            "relUrl": "/week20/2023/01/24/MCQ-Test-2-corrections.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "Create Performance Task Criteria no.3",
            "content": "Submissions . Submission 1 . Reporting Category | Student Score | CB Score | Comments | . #1 Program Purpose and Function | 1 | 1 | correctly demonstrates input, output, purpose, and functionality | . #2 Data Abstraction | 0 | 0 | List is not accessed in code segment | . #3 Managing Complexity | 0 | 0 | list does not manage complexity | . #4 Procedural Abstraction | 0 | 0 | does not specify how procedure connects to overall program | . #5 Algorithm Implementation | 1 | 1 | explains in detail how algorithm works and demonstrates key ideas | . #6 Testing | 1 | 1 | correctly identifies two calls and their conditions and results | . Submission 2 . Reporting Category | Student Score | CB Score | Comments | . #1 Program Purpose and Function | 1 | 1 | correctly demonstrates input, output, purpose, and functionality | . #2 Data Abstraction | 1 | 1 | correctly identifies data being stored in a list, name of the list, and what the data represents in the program | . #3 Managing Complexity | 1 | 1 | correctly demonstrates how program manages complexity and how it could be written differently without lists | . #4 Procedural Abstraction | 1 | 1 | correctly demonstrates both code procedures and how the procedure connects to the program | . #5 Algorithm Implementation | 1 | 1 | explains in detail how algorithm works and demonstrates key ideas | . #6 Testing | 1 | 1 | correctly identifies two calls and their conditions and results | . Submission 3 . Reporting Category | Student Score | CB Score | Comments | . #1 Program Purpose and Function | 1 | 1 | correctly demonstrates input, output, purpose, and functionality | . #2 Data Abstraction | 0 | 0 | description inaccurate | . #3 Managing Complexity | 0 | 0 | does not explain that the code can be written without a list inefficiently | . #4 Procedural Abstraction | 0 | 0 | inaccurately describes function of the procedure | . #5 Algorithm Implementation | 0 | 0 | does not include iteration | . #6 Testing | 0 | 0 | incorrect parameters | . Submission 4 . Reporting Category | Student Score | CB Score | Comments | . #1 Program Purpose and Function | 1 | 1 | correctly demonstrates input, output, purpose, and functionality. | . #2 Data Abstraction | 1 | 1 | correctly identifies data being stored in a list, name of the list, and what the data represents in the program | . #3 Managing Complexity | 1 | 1 | correctly demonstrates how program manages complexity and how it could be written differently without lists | . #4 Procedural Abstraction | 1 | 1 | correctly demonstrates both code procedures and how the procedure connects to the program | . #5 Algorithm Implementation | 1 | 1 | explains in detail how algorithm works and demonstrates key ideas | . #6 Testing | 1 | 0 | response does not give arguments in parameters | . Discrepancy . #6 – I incorrectly thought the conditions being tested were the arguments in the rubric | . Reflection . Overall I think I need to be more strict, all of the discrepancies that I had with CB were from me being generous or not entirely reading the rubric. If I am harsher on myself when reviewing my work I am more likely to get a good grade. I also need to watch out for common mistakes like the program purpose describing functionality or incorrectly explaining how list manages program complexity. .",
            "url": "https://ryanrob327.github.io/csp/week19/2023/01/19/CPT-part-3.html",
            "relUrl": "/week19/2023/01/19/CPT-part-3.html",
            "date": " • Jan 19, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "Create Performance Task Criteria no.2",
            "content": "Submissions . Submission 1 . Reporting Category | Student Score | CB Score | Comments | . #1 Program Purpose and Function | 0 | 0 | program functionality and purpose are switched | . #2 Data Abstraction | 0 | 0 | list does not show images and names | . #3 Managing Complexity | 0 | 0 | does not explain how list manages complexity | . #4 Procedural Abstraction | 1 | 0 | response does not connect how procedure contributes to functionality | . #5 Algorithm Implementation | 0 | 0 | algorithm not explained in enough detail | . #6 Testing | 1 | 1 | correctly identifies two calls and their conditions and results | . Discrepancy . #4 – I incorrectly thought that describing the procedure was enough but you also have to connect the procedure to the overall functionality of the code. | . Submission 2 . Reporting Category | Student Score | CB Score | Comments | . #1 Program Purpose and Function | 1 | 1 | correctly demonstrates input, output, purpose, and functionality | . #2 Data Abstraction | 1 | 1 | correctly identifies data being stored in a list, name of the list, and what the data represents in the program | . #3 Managing Complexity | 1 | 1 | correctly demonstrates how program manages complexity and how it could be written differently without lists | . #4 Procedural Abstraction | 1 | 1 | correctly demonstrates both code procedures and how the procedure connects to the program | . #5 Algorithm Implementation | 1 | 1 | explains in detail how algorithm works and demonstrates key ideas | . #6 Testing | 1 | 1 | correctly identifies two calls and their conditions and results | . Submission 3 . Reporting Category | Student Score | CB Score | Comments | . #1 Program Purpose and Function | 0 | 0 | describes functionality where it should describe purpose | . #2 Data Abstraction | 1 | 1 | correctly identifies data being stored in a list, name of the list, and what the data represents in the program | . #3 Managing Complexity | 1 | 1 | correctly demonstrates how program manages complexity and how it could be written differently without lists | . #4 Procedural Abstraction | 1 | 1 | correctly demonstrates both code procedures and how the procedure connects to the program | . #5 Algorithm Implementation | 1 | 1 | explains in detail how algorithm works and demonstrates key ideas | . #6 Testing | 1 | 1 | correctly identifies two calls and their conditions and results | . Submission 4 . Reporting Category | Student Score | CB Score | Comments | . #1 Program Purpose and Function | 1 | 1 | correctly demonstrates input, output, purpose, and functionality | . #2 Data Abstraction | 0 | 0 | does not properly demonstrate the use of lists | . #3 Managing Complexity | 0 | 0 | uses list, list does not store data, it acts as a counter | . #4 Procedural Abstraction | 1 | 1 | correctly demonstrates both code procedures and how the procedure connects to the program | . #5 Algorithm Implementation | 1 | 1 | explains in detail how algorithm works and demonstrates key ideas | . #6 Testing | 1 | 0 | response gives conditions being tested rather than arguments | . Discrepancy . #6 – I incorrectly thought the conditions being tested were the arguments in the rubric | . Reflection . Overall I think I need to be more strict, all of the discrepancies that I had with CB were from me being generous or not entirely reading the rubric. I also need to watch out for common mistakes like the program purpose describing functionality or incorrectly explaining how list manages program complexity. .",
            "url": "https://ryanrob327.github.io/csp/week18/2023/01/11/CPT-part-2.html",
            "relUrl": "/week18/2023/01/11/CPT-part-2.html",
            "date": " • Jan 11, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "OOP",
            "content": "User class . I added a classOf function that calculates your class of graduation and adds it to the dictionary . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, dob): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob self._classOf = 0 @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # sets the class of graduation to 18 years after date of birth def classOf(self): self._classOf = self._dob.year + 18 return self._classOf # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age, &quot;class of graduation&quot; : self._classOf } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Ryan McWeeny&#39;, uid=&#39;Ryan&#39;, password=&#39;Password&#39;, dob=date(2006, 3, 27)) u1.classOf() print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) #print(&quot;class of graduation: &quot;, u1.classOf()) . JSON ready string: {&#34;name&#34;: &#34;Ryan McWeeny&#34;, &#34;uid&#34;: &#34;Ryan&#34;, &#34;dob&#34;: &#34;03-27-2006&#34;, &#34;age&#34;: 16, &#34;class of graduation&#34;: 2024} Raw Variables of object: {&#39;_name&#39;: &#39;Ryan McWeeny&#39;, &#39;_uid&#39;: &#39;Ryan&#39;, &#39;_password&#39;: &#39;sha256$O5cjuN0ytlf7K9Kw$977f8890f49ea3b092448b374406d28c56820045029827c51a8bb3961ce54e79&#39;, &#39;_dob&#39;: datetime.date(2006, 3, 27), &#39;_classOf&#39;: 2024} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_classOf&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;classOf&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Ryan McWeeny, uid=Ryan, password=sha256$O5cjuN0ytlf7K9Kw$977f8890f49ea3b092448b374406d28c56820045029827c51a8bb3961ce54e79,dob=2006-03-27) . CPT related class . This class is related to my create performance task where the user can input information about their account like their name, password, and email . from datetime import date import json class User: def __init__(self, name, password, email): self._name = name self._password = password self._email = email # getter method for username @property def name(self): return self._name # setter method for username @name.setter def name(self, username): self._name = name # getter method for password @property def password(self): return self._password # setter method for password @password.setter def password(self, password): self._password = password # getter method for email @property def email(self): return self._email # setter method for email @email.setter def email(self, email): self._email = email # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;email&quot; : self.email, } return dict # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(username={self._name}, password={self._password},email={self._email})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Ryan&#39;, password=&#39;Password&#39;, email = &#39;ryanrob327@gmail.com&#39;) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) . JSON ready string: {&#34;name&#34;: &#34;Ryan&#34;, &#34;email&#34;: &#34;ryanrob327@gmail.com&#34;} Raw Variables of object: {&#39;_name&#39;: &#39;Ryan&#39;, &#39;_password&#39;: &#39;Password&#39;, &#39;_email&#39;: &#39;ryanrob327@gmail.com&#39;} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_email&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;dictionary&#39;, &#39;email&#39;, &#39;name&#39;, &#39;password&#39;] Representation to Re-Create the object: User(username=Ryan, password=Password,email=ryanrob327@gmail.com) .",
            "url": "https://ryanrob327.github.io/csp/week18/2023/01/10/OOP.html",
            "relUrl": "/week18/2023/01/10/OOP.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "Create Performance Task Criteria",
            "content": "Submissions . Submission 1 . Reporting Category | Student Score | CB Score | Comments | . #1 Program Purpose and Function | 0 | 0 | Does not correctly describe program purpose, instead describes functionality | . #2 Data Abstraction | 1 | 1 | meets all criteria, correctly describes two code segments | . #3 Managing Complexity | 0 | 0 | could preferably say that the list could be replaced by return statements | . #4 Procedural Abstraction | 1 | 1 | meets all criteria, with student produced procedure and description of functionality of the procedure | . #5 Algorithm Implementation | 1 | 1 | meets all criteria, includes detailed description of sequencing, selection, and iteration in the program | . #6 Testing | 1 | 1 | meets all criteria, describes two calls with their conditions and procedures | . Submission 2 . Reporting Category | Student Score | CB Score | Comments | . #1 Program Purpose and Function | 1 | 1 | meets all criteria, correctly describes the overall purpose, program functionality, input, and output | . #2 Data Abstraction | 1 | 1 | meets all criteria, correctly describes two code segments | . #3 Managing Complexity | 1 | 1 | meets all criteria, correctly describes the use of lists and how those lists improve the program | . #4 Procedural Abstraction | 1 | 1 | meets all criteria, with student produced procedure and description of functionality of the procedure | . #5 Algorithm Implementation | 1 | 1 | meets all criteria, includes detailed description of sequencing, selection, and iteration in the program | . #6 Testing | 1 | 1 | meets all criteria, describes two calls with their conditions and procedures | . Reflection . To fulfill all CB requirements my program must include multiple examples of iteration, algorithms, procedure, and functionality in order to solve a problem or express innovation. In order to do this I need to rigorously test my code and review my written response myself along with other people to make sure I have met all standards and checked off all requirements of college board. | .",
            "url": "https://ryanrob327.github.io/csp/week17/2023/01/04/CB-Performance-Task-Scoring-Criterea-Blog.html",
            "relUrl": "/week17/2023/01/04/CB-Performance-Task-Scoring-Criterea-Blog.html",
            "date": " • Jan 4, 2023"
        }
        
    
  
    
        ,"post21": {
            "title": "Lesson 17 and 18 hacks",
            "content": "Vocab . Problem: description of a task that may or may not be able to be solved through the use of an algorithm. | Decision problem: a problem with a binary answer (yes or no). | Optimization problem: a problem with the objective of finding the BEST solution amongst many possibilities to solve a problem. | Decidable problem: problem for which algorithms can be written to solve/produce a correct output for all possible inputs. | Undecidable problem: These are problems for which no algorithms can be built that can provide a correct yes or no answer. | . Notes . An algorithm&#39;s efficiency is determine through formal or mathematical reasoning. | An algorithm’s efficiency can be informally measured by determining the number of times a statement or group of statements executes. | Algorithms with a polynomial efficiency or slower (constant, linear, square, cube, etc.) are said to run in a reasonable amount of time. Algorithms with exponential or factorial efficiencies are examples of algorithms that run in an unreasonable amount of time. | Some problems cannot be solved in a reasonable amount of time because there is no efficient algorithm for solving them. In these cases, approximate solutions are sought. | . Hacks . Decidable problems are designed to produce an output for every possible input, and example is Linear Search. Undecidable problems cannot have algorithms be built that can produce a correct answer an example is a paradox. . | C. is a three step algorithm . | peakFinder code . | function findpeak(ar) { var peak = -Infinity; // Cycle through all the elements of the array for(var i = 0; i &lt; ar.length; i++) { var el = ar[i]; // If an element is of type array then invoke the same function // to find out the maximum element of that subarray if ( Array.isArray(el) ) { el = findpeak( el ); } if ( el &gt; peak ) { peak = el; } } return peak; } . merge sort | arr = [5,1,6,2,7,3,4,8] def Merge_sort(arr): if len(arr) &gt; 1: mid = len(arr) // 2 left = arr[:mid] right = arr[mid:] Merge_sort(left) Merge_sort(right) i = 0 j = 0 k = 0 while i &lt; len(left) and j &lt; len(right): if left[i] &lt;= right[j]: arr[k] = left[i] i += 1 else: arr[k] = right[j] j += 1 k += 1 while i &lt; len(left): arr[k] = left[i] i += 1 k += 1 while j &lt; len(right): arr[k] = right[j] j += 1 k += 1 MS = Merge_sort(arr) for i in range(len(arr)): print(arr[i]) . 1 2 3 4 5 6 7 8 . Heap Permutation | def heap_permutation(data, n): if n == 1: print(data) return from itertools import permutations perm = permutations([3,2,1]) for i in list(perm): print(i) . (3, 2, 1) (3, 1, 2) (2, 3, 1) (2, 1, 3) (1, 3, 2) (1, 2, 3) .",
            "url": "https://ryanrob327.github.io/csp/week16/2022/12/14/lessons-17-and-18.html",
            "relUrl": "/week16/2022/12/14/lessons-17-and-18.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Lesson 16 hacks",
            "content": "Vocab . Simulation: simpler abstraction of a complicated natural phenomena | Experiment: done in the real world and provide actual results | . Notes . Simulations are safer than experiments, less expensive, repeatable, and can make predictions | remove details using random numbers | . Hacks . Multiple Choice . Question Answer . Ryan McWeeny | is a genius | . 1. | N/A | . 2. | N/A | . 3. | B | . 4. | C | . 5. | C | . 6. | B | . 7. | A | . 8. | N/A | . 9. | A | . Extra Credit . This simulation find the total result of rolling the inputted number of dice . import random rollAmount = int(input(&quot;how many times would you like to roll?&quot;)) result = 0 for i in range(0, rollAmount): result += random.randint(1,6) print(&quot;The result of rolling &quot; + str(rollAmount) + &quot; times is: &quot; + str(result)) . The result of rolling 3 times is: 11 .",
            "url": "https://ryanrob327.github.io/csp/week16/2022/12/13/lesson-16.html",
            "relUrl": "/week16/2022/12/13/lesson-16.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Lessons 3.14-3.15 hacks",
            "content": "Reflection . Vocab . Documentation: Text that explains the what, how, or why of your code. | Libraries: A collection of prewritten code or procedures that coders can use to maximize their efficiency. | Application Programming Interface: A type of software through several computers are able to communicate information amongst each other. | . Notes . Libraries contain procedures that make programming easier. | procedures are especially good for reusing segments of code by calling the procedure. | random procedure: Random(a,b) provides a random number in the range [a, b] | . Hacks . Multiple Choice . B) a random integer between &#39;a&#39; and &#39;b&#39; inclusive | A) x = start, y = stop, z = step | A) random.item() does not exist | Short Answer . Libraries are convenient because they provide procedures and prewritten code to maximize the efficiency of programmers | This procedure takes a list of strings and returns who will buy the meal today | import random # takes user input, puts it into a list of names names_string = input(&quot;Give me everybody&#39;s names, seperated by a comma.&quot;) names = names_string.split(&quot;,&quot;) num_items = len(names) # uses random to choose a random number random_choice = random.randint(0, num_items - 1) # associates random number with a name person_who_will_pay = names[random_choice] # prints name print(f&quot;{person_who_will_pay} is going to buy the meal today!&quot;) . Coding challenges . import random NAMES = [&quot;Aiden&quot;, &quot;Brayden&quot;, &quot;Bradley&quot;, &quot;Harambe&quot;, &quot;Charles&quot;, &quot;BigChungus&quot;, &quot;Chad&quot;, &quot;Brett&quot;, &quot;Dorian&quot;, &quot;Ryan&quot;, &quot;Varalu&quot;, &quot;Rohin&quot;, &quot;Advay&quot;, &quot;SmallChungus&quot;] rand_list = [] def randomPeople(names, new_names): count = 1 while count &lt;= 5: number = random.randint(0, len(names) - 1) new_names.append(names[number]) count += 1 return new_names print(randomPeople(NAMES, rand_list)) . [&#39;Charles&#39;, &#39;BigChungus&#39;, &#39;Rohin&#39;, &#39;Dorian&#39;, &#39;Aiden&#39;] . import random score1 = 0 score2 = 0 def greatestRoll(): score1 = random.randint(1, 6) + random.randint(1, 6) score2 = random.randint(1, 6) + random.randint(1, 6) if score1 &gt; score2: print(&quot;Player 1 won with a score of &quot; + str(score1) + &quot; points!&quot;) if score1 &lt; score2: print(&quot;Player 2 won with a score of &quot; + str(score2) + &quot; points!&quot;) if score1 == score2: print(&quot;Both players tied with &quot; + str(score1) + &quot; points!&quot;) greatestRoll() . Player 1 won with a score of 9 points! .",
            "url": "https://ryanrob327.github.io/csp/week16/2022/12/12/lessons-2.14-and-3.15.html",
            "relUrl": "/week16/2022/12/12/lessons-2.14-and-3.15.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Lessons 3.12-3.13 hacks",
            "content": "Vocab . Procedure - named group of programming instructions that may have parameters and return values. . Parameters - input values of a procedure. . Modularity - the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program. . Notes . If you have a set of statements and inside there is a procedure then when it reaches that procedure it will excute that procedure and then go back to the rest of the statments. | If you see a return statement you automatically end the procedure even if there is more statements | Two types of procedures, one that returns a value and one that executes a block of code. | The subdivision of a computer program into sepearate subprogrames is called modularity, | . Hacks . 3.12 part 1 . 1.1 . This code would return an error because there is an unmatched curly brace and if the program did not have an error, the code would display &quot;the minimum number is&quot; because the minimum number is never displayed. | . 1.2 . PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (distance/time) } | . 1.3 . False, program will return all caps; IM MAD | . 1.4 . totalFootprint ← calcFlightFootprint(2451, 118) + calcFlightFootprint(3442, 252) | . 3.12 part 2 . 2.1 . The first procedure would display the value 81*9 = 729 | . 2.2 . The second procedure would display 190 | . 2.3 . The third procedure equals 39.44 | . 3.13 . 3.1 . def replaceRByards(toprbyardspg, currentrbyards, totalGames): if ((toprbyardspg/totalGames) &lt; (currentrbyards/totalGames)): toprbyardspg = currentrbyards print(toprbyardspg) replaceRByards(100, 1260, 12) . 1260 . 3.2 . PROCEDURE goForwardThenTurn(X, dir){ for i in range x { MOVE_FORWARD) } if dir = &quot;right&quot;{ ROTATE_RIGHT() MOVE_FORWARD() ROTATE_LEFT() } else{ ROTATE_LEFT() MOVE_FORWARD() ROTATE_RIGHT() } } PROCEDURE goForwardX(X){ for i in range x { MOVE_FORWARD()) } } goForwardX(1) ROTATE_LEFT() goForwardThenTurn(2, right) goForwardThenTurn(2, left) goForwardThenTurn(1, left) goForwardThenTurn(2, right) goForwardX(1) ROTATE_RIGHT() goForwardX(2) . 3.3 . B) procedure MyList ### 3.4 | . PROCEDURE BallToGreen{ Rotate_Left Move_Forward Rotate_Right Move_Forward( until count = 6) break Rotate_Left Move_Forward (until count=2) break } .",
            "url": "https://ryanrob327.github.io/csp/week15/2022/12/07/lessons-3.12-and-3.13.html",
            "relUrl": "/week15/2022/12/07/lessons-3.12-and-3.13.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Lessons 3.9 and 3.11 hacks",
            "content": "1. if-else statement . stayInside = True isCold = True isRaining = True if isCold or isRaining: stayInside = True else: stayInside = False . 2. turn-based algorithm . import random attempts = 4 score = [] length = len(score) while attempts &gt; 0: score.append(random.randint(1,10)) attempts -= 1 score.sort() print(score[len(score) - 1]) print(score) . 9 [3, 4, 7, 9] . 3. Reach the grey square . { if CANMOVEFORWARD{ moveForwards } else{ if CANTURNRIGHT{ turnright } if CANTURNLEFT{ turnleft } } } . 4. Binary search tree . images . 5. how to get 69 . Check the number splitting the array, if this number is less than the desired number take the number splitting the larger numbers, repeat until desired number is found. . 6. How I found the list . images . 7. put list in order . [&quot;Market”, ”Ralphs”, “store”, &quot;Target”, ”Walmart”] . You could add this in this order in order to put them in alphabetical order, ascending. This way these could be properly compared, as numbers are greater, you can compare which numerical value of these ascii characters is greater. . 8. why Binary &gt; Sequential . Binary search is far quicker than sequential search because binary search inherently rules out half of the possibilities every iteration. Since you start at the middle index, you can either choose to pick the group that is greater than the middle index, or the group that is lower. As a result, you will rule out half of the known possibilities every single time you make a cut. . 9. . Out of the list [64,36,16,11,9], I would be searching for 36. First I would select the middle element ((1+5)/2 = 3, and for the purpose of collegeboard that is the middle element), and 16 is less than 36, so I would move back, (as the list is reversed). Hence, I would select the 2nd element ((1+3)/2 = 2) and that is equal to 36, so it would take me two tries in order to get to 36. . images .",
            "url": "https://ryanrob327.github.io/csp/week15/2022/12/06/lessons-3.9-and-3.8.html",
            "relUrl": "/week15/2022/12/06/lessons-3.9-and-3.8.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Lessons 3.9 and 3.11 Images",
            "content": "Q4 . . Q6 . . Q9 . .",
            "url": "https://ryanrob327.github.io/csp/week15/2022/12/06/lessons-3.9-and-3.11-images.html",
            "relUrl": "/week15/2022/12/06/lessons-3.9-and-3.11-images.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "lesson grades",
            "content": "Lesson Grades . 3.1-3.2 | 0.8 | . 3.3-3.4 | 0.85 | . 3.5-3.7 | 0.9 | . 3.8,3.10 | N/A | . 3.9,3.11 | 9.0 | . 3.12-3.13 | 9.0 | . 3.14-3.15 | 9.0 | . 3.16 | TBD | . 3.17-3.18 | TBD | . Lessons 3.1-3.2 . 0.8 | It is hard to tell what I did wrong because my only feedback was &quot;missing hacks&quot; which is not very specific. To fix this problem in the future I will make sure to double check the directions before submitting. | . Lessons 3.3-3.4 . 0.85 | With this lesson I met all requirements but I used a somewhat lazy format with tables where I only gave the question and answer, because of this I got marked down for no explanations of my answers. To fix this problem in the future I will add a third column that explains how I came to a certain answer when I get more multiple choice problems. | . Lessons 3.5-3.7 . 0.9 | With this lesson I met all requirements and did not go above and beyond, I feel that I learned from this lesson and the grade I earned was appropriate I fixed the errors I made last week by taking extra notes. | . Lessons 3.8 and 3.10 . N/A | . Lessons 3.9 and 3.11 . TBD | . Lessons 3.12-3.13 . TBD | . Lessons 3.14-3.15 . TBD | . Lessons 3.16 . TBD | . Lessons 3.17-3.18 . TBD | .",
            "url": "https://ryanrob327.github.io/csp/week14/week15/week16/2022/12/02/all-lesson-grades.html",
            "relUrl": "/week14/week15/week16/2022/12/02/all-lesson-grades.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Lessons 3.5, 3.6 and 3.7 hacks",
            "content": "Vocab . Boolean: binary variable with only two possible values, &quot;true&quot; or &quot;false&quot; . Algorithm: Finite set of instructions that accomplish a specific task . Nested conditional: A conditional inside of a conditional . 3.5 Hacks . Binary Practice . Question Answer . 1. | false | . 2. | false | . 3. | true | . 4. | false | . AND Operator Value 1 Value 2 Result . 1 | 1 | 1 | . 1 | 0 | 0 | . 0 | 1 | 0 | . 0 | 0 | 0 | . OR Operator Value 1 Value 2 Result . 1 | 1 | 1 | . 1 | 0 | 1 | . 0 | 1 | 1 | . 0 | 0 | 0 | . Not operator Not Value Result . Not | 1 | 0 | . Not | 0 | 1 | . . python practice . print(20 == 10) # prints value false x = 30 y = 20 z = 10 print(x &gt; y - z) # changed addition to subtraction # Manipulate the variables x, y, and z to make the below statement return true print(x == z + y) . 3.6 Hacks . AP Prep . Question Answer . 1. | 3 | . 2. | 2 | . 3. | 2 | . 4. | 1 | . using python . animals = [&quot;lion&quot;, &quot;tiger&quot;, &quot;wildebeest&quot;, &quot;shark&quot;, &quot;jellyfish&quot;, &quot;blobfish&quot;, &quot;raven&quot;] for i in animals: if i == &quot;wildebeest&quot; or &quot;lion&quot;: # What boolean value does this statement cause? true print(&quot;This animal lives in the desert&quot;) else: print(i) # Practice # Using only one more if statement, alter the code to print out a statement saying if an animal lives in the desert, based on booleans . This animal lives in the desert This animal lives in the desert This animal lives in the desert This animal lives in the desert This animal lives in the desert This animal lives in the desert This animal lives in the desert . 3.7 Hacks . Exercise 1 . Meals = {&quot;Chicken Alfredo&quot;: [&quot;Chicken&quot;, 60], &quot;Cheese Quesadilla&quot;: [&quot;None&quot;, 10], &quot;Beef Wellington&quot;: [&quot;Beef&quot;, 150] } for meal in Meals.values(): if meal[0] == &quot;None&quot; and meal[1] &lt;= 30: print(&quot;cook this meal&quot;) . cook this meal .",
            "url": "https://ryanrob327.github.io/csp/week14/2022/12/01/lessons-3.5,-3.6-and-3.7.html",
            "relUrl": "/week14/2022/12/01/lessons-3.5,-3.6-and-3.7.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Lessons 3.3 and 3.4 hacks",
            "content": "Lesson 3.3 video 1 hacks . together the steps make a sequence | the while loops create iteration by incrementing a variable such as &#39;x&#39; or &#39;y&#39; | . x = 1 char = &quot; &quot; while x &lt;= 5: y = 1 while y &lt;= x: print (char, end= &quot;&quot;) y += 1 print () x += 1 . . Lesson 3.3 video 2 hacks . Question Answer . 1. | a = 1, b = 7, c = 3, d = 7 | . 2. | both values are true | . 3. | num1 = 6, num2 = 11 | . Lesson 3.4 video . Question Answer . 1. | SmithB@gmail.com | . 2. | ompuook | .",
            "url": "https://ryanrob327.github.io/csp/week14/2022/11/29/lessons-3.3-and-3.4.html",
            "relUrl": "/week14/2022/11/29/lessons-3.3-and-3.4.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Lessons 3.1 and 3.2 hacks",
            "content": "Binary Hacks . Question Answer . 1. | 7 | . 2. | 11 | . 3. | 107 | . Question | Answer | . 1. | 1100 | . 2. | 101100 | . 3. | 11111110 | . Homework/Hacks . Question Answer . 1. | [92, 79, 97, 63] | . 2. | [&quot;sam&quot;, &quot;ann&quot;] | . 3. | 6 | . 4. | 5 | . 5. | All of the above | . 6. | -106.2 | . 7. | 16 | . 8. | False | . 9. | the list has floats and strings as a variable type and the idex of &#39;Avocado&#39; is 4 | . What I learned . I already knew what this lesson taught us, however, this lesson still provided excellent practice for the AP exam .",
            "url": "https://ryanrob327.github.io/csp/week14/2022/11/28/lessons-3.1-and-3.2.html",
            "relUrl": "/week14/2022/11/28/lessons-3.1-and-3.2.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Tools Verification",
            "content": "Make server . Command: . . Website: . .",
            "url": "https://ryanrob327.github.io/csp/week13/2022/11/18/Tools-Verification.html",
            "relUrl": "/week13/2022/11/18/Tools-Verification.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Binary Math",
            "content": "| JavaScript and html Table | JavaScript Basics | API | Binary | . Plus Binary Octal Hexadecimal Decimal Character Minus . +1 | 00000000 | 0 | 0 | 0 | | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://ryanrob327.github.io/csp/week13/2022/11/15/Binary.html",
            "relUrl": "/week13/2022/11/15/Binary.html",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "N@M",
            "content": "Work Watch . This was a helpful tool that allows the user to time how long they have been working and take breaks frequently. This site also allows for the user to create tasks and organize them in a helpful format. I like this site because it seems to have nice functionality and program purpose. . . Lawnmowers Arcade . This site was an arcade site that offered a plethora of video games for the user. This site was arguably one of the most entertaining with games like snake, blackjack, joke box, and pong. Additionally, they had a voting system that accessed API in backend. . .",
            "url": "https://ryanrob327.github.io/csp/week11/2022/11/03/N@M-blog.html",
            "relUrl": "/week11/2022/11/03/N@M-blog.html",
            "date": " • Nov 3, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Python Web API Endpoints using Jokes",
            "content": "Model for API . We will begin our journey into APIs by creating and thinking about data. We have learned about Python Lists and dictionaries. In this data example, we are going to make &quot;the best computer jokes ever ;)&quot; and serve them over the Internet. The ultimate objective is to allow our viewers to provide a like or dislike on each of our jokes. . This code planning begins by coming up with some jokes and defining a data &quot;model&quot; to keep and manage the jokes. . jokes_data contains a list of dictionary records containing joke and reactions:haha or boohoo - joke_list contains collection of jokes we will put into jokes_data | . | Next comes some functions to interact with our jokes . def initJokes(): initializes jokes_data | def getJokes(): returns the complete list of jokes | def getJoke(): returns a single joke from our list | ... many more function can be examined by reading comments below ... | . | . import random jokes_data = [] joke_list = [ &quot;If you give someone a program... you will frustrate them for a day; if you teach them how to program... you will &quot; &quot;frustrate them for a lifetime.&quot;, &quot;Q: Why did I divide sin by tan? A: Just cos.&quot;, &quot;UNIX is basically a simple operating system... but you have to be a genius to understand the simplicity.&quot;, &quot;Enter any 11-digit prime number to continue.&quot;, &quot;If at first you don&#39;t succeed; call it version 1.0.&quot;, &quot;Java programmers are some of the most materialistic people I know, very object-oriented&quot;, &quot;The oldest computer can be traced back to Adam and Eve. It was an apple but with extremely limited memory. Just &quot; &quot;1 byte. And then everything crashed.&quot;, &quot;Q: Why did Wi-Fi and the computer get married? A: Because they had a connection&quot;, &quot;Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10.&quot;, &quot;Q: What’s a aliens favorite computer key? A: the space bar!&quot;, &quot;There are 10 types of people in the world: those who understand binary, and those who don’t.&quot;, &quot;If it wasn&#39;t for C, we’d all be programming in BASI and OBOL.&quot;, &quot;Computers make very fast, very accurate mistakes.&quot;, &quot;Q: Why is it that programmers always confuse Halloween with Christmas? A: Because 31 OCT = 25 DEC.&quot;, &quot;Q: How many programmers does it take to change a light bulb? A: None. It’s a hardware problem.&quot;, &quot;The programmer got stuck in the shower because the instructions on the shampoo bottle said: Lather, Rinse, Repeat.&quot;, &quot;Q: What is the biggest lie in the entire universe? A: I have read and agree to the Terms and Conditions.&quot;, &#39;An SQL statement walks into a bar and sees two tables. It approaches, and asks may I join you?&#39; ] # Initialize jokes def initJokes(): # setup jokes into a dictionary with id, joke, haha, boohoo item_id = 0 for item in joke_list: jokes_data.append({&quot;id&quot;: item_id, &quot;joke&quot;: item, &quot;haha&quot;: 0, &quot;boohoo&quot;: 0}) item_id += 1 # prime some haha responses for i in range(200): id = getRandomJoke()[&#39;id&#39;] addJokeHaHa(id) # prime some haha responses for i in range(50): id = getRandomJoke()[&#39;id&#39;] addJokeBooHoo(id) # Return all jokes from jokes_data def getJokes(): return(jokes_data) # Joke getter def getJoke(id): return(jokes_data[id]) # Return random joke from jokes_data def getRandomJoke(): return(random.choice(jokes_data)) # Liked joke def favoriteJoke(): best = 0 bestID = -1 for joke in getJokes(): if joke[&#39;haha&#39;] &gt; best: best = joke[&#39;haha&#39;] bestID = joke[&#39;id&#39;] return jokes_data[bestID] # Jeered joke def jeeredJoke(): worst = 0 worstID = -1 for joke in getJokes(): if joke[&#39;boohoo&#39;] &gt; worst: worst = joke[&#39;boohoo&#39;] worstID = joke[&#39;id&#39;] return jokes_data[worstID] # Add to haha for requested id def addJokeHaHa(id): jokes_data[id][&#39;haha&#39;] = jokes_data[id][&#39;haha&#39;] + 1 return jokes_data[id][&#39;haha&#39;] # Add to boohoo for requested id def addJokeBooHoo(id): jokes_data[id][&#39;boohoo&#39;] = jokes_data[id][&#39;boohoo&#39;] + 1 return jokes_data[id][&#39;boohoo&#39;] # Pretty Print joke def printJoke(joke): print(joke[&#39;id&#39;], joke[&#39;joke&#39;], &quot; n&quot;, &quot;haha:&quot;, joke[&#39;haha&#39;], &quot; n&quot;, &quot;boohoo:&quot;, joke[&#39;boohoo&#39;], &quot; n&quot;) # Number of jokes def countJokes(): return len(jokes_data) # Test Joke Model if __name__ == &quot;__main__&quot;: initJokes() # initialize jokes # Most likes and most jeered best = favoriteJoke() print(&quot;Most liked&quot;, best[&#39;haha&#39;]) printJoke(best) worst = jeeredJoke() print(&quot;Most jeered&quot;, worst[&#39;boohoo&#39;]) printJoke(worst) # Random joke print(&quot;Random joke&quot;) printJoke(getRandomJoke()) # Count of Jokes print(&quot;Jokes Count: &quot; + str(countJokes())) . Most liked 18 6 The oldest computer can be traced back to Adam and Eve. It was an apple but with extremely limited memory. Just 1 byte. And then everything crashed. haha: 18 boohoo: 6 Most jeered 6 6 The oldest computer can be traced back to Adam and Eve. It was an apple but with extremely limited memory. Just 1 byte. And then everything crashed. haha: 18 boohoo: 6 Random joke 12 Computers make very fast, very accurate mistakes. haha: 12 boohoo: 3 Jokes Count: 18 . Backend Interface for Web API (Control) . An application programming interface (API) is the medium by which different systems of software interact. In our applications we have two big systems:1. Python Backend that stores data beyond a single Web page2. GH Pages/Fastpages Frontend that is responsible for presenting data . To communicate data between Frontend and Backend, this section Backend code provides and interface to the Frontend using a Web Service Endpoint. Examples of endpoints are listed below and can be typed within a browser, which will return JSON data: . https://flask.nighthawkcodingsociety.com/api/jokes | https://flask.nighthawkcodingsociety.com/api/jokes/2 | https://flask.nighthawkcodingsociety.com/api/jokes/random | . As you can see, these Endpoints return JSON. They are NOT that readable by normal humans. However, they are very effective in passing requested data across the Internet. The Frontend code is responsible for formatting and presenting and interface that allows the typical computer user to interact with this data. . The next cell of code is Creating Endpoints that return JSON. This allows developers in the Frontend to interact with Backend data. API is a contract between the Frontend and Backend on how to share data. . FYI, there is NO output from this section . . from flask import Blueprint, jsonify # jsonify creates an endpoint response object from flask_restful import Api, Resource # used for REST API building import requests # used for testing import random # Blueprints allow this code to be procedurally abstracted from main.py, meaning code is not all in one place app_api = Blueprint(&#39;api&#39;, __name__, url_prefix=&#39;/api/jokes&#39;) # endpoint prefix avoid redundantly typing /api/jokes over and over # API generator https://flask-restful.readthedocs.io/en/latest/api.html#id1 api = Api(app_api) class JokesAPI: # not implemented, this would be where we would allow creation of a new Joke class _Create(Resource): def post(self, joke): pass # getJokes() class _Read(Resource): def get(self): return jsonify(getJokes()) # getJoke(id) class _ReadID(Resource): def get(self, id): return jsonify(getJoke(id)) # getRandomJoke() class _ReadRandom(Resource): def get(self): return jsonify(getRandomJoke()) # getRandomJoke() class _ReadCount(Resource): def get(self): count = countJokes() countMsg = {&#39;count&#39;: count} return jsonify(countMsg) # put method: addJokeHaHa class _UpdateLike(Resource): def put(self, id): addJokeHaHa(id) return jsonify(getJoke(id)) # put method: addJokeBooHoo class _UpdateJeer(Resource): def put(self, id): addJokeBooHoo(id) return jsonify(getJoke(id)) # building RESTapi interfaces, these routes are added to Web Server http://&lt;server&lt;/api/jokes api.add_resource(_Create, &#39;/create/&lt;string:joke&gt;&#39;) api.add_resource(_Read, &#39;/&#39;) # default, which returns all jokes api.add_resource(_ReadID, &#39;/&lt;int:id&gt;&#39;) api.add_resource(_ReadRandom, &#39;/random&#39;) api.add_resource(_ReadCount, &#39;/count&#39;) api.add_resource(_UpdateLike, &#39;/like/&lt;int:id&gt;/&#39;) api.add_resource(_UpdateJeer, &#39;/jeer/&lt;int:id&gt;/&#39;) . Frontend (View Simulation) and Hacks . This python codes tests endpoints on a server. This can be handy for development and testing when making modifications to the Jokes Web APIs. This code works off of the server endpoint/url, not from code cells above it in this notebook. . To work with this code and make observation for learning... . Run a local server from flask_portfolio project and the change server variable to be local | Observe the requests endpoints and the output, see if you can observe what is happening/changing on put requests | The &quot;requests&quot; are captured into a List, the List is used in the for loop to extract from RESTful API format. | Try running this with Debugging and observe what data is being created at each step (Required) | Try to format this data in Python print statements to be more readable (Required) | Start and stop local server and observe errors | . # server = &quot;http://127.0.0.1:5000/&quot; # run local server = &#39;https://flask.nighthawkcodingsociety.com/&#39; # run from web server url = server + &quot;api/jokes/&quot; responses = [] # responses list # Get the count of jokes on server count_response = requests.get(url+&quot;count&quot;) count_json = count_response.json() count = count_json[&#39;count&#39;] # Update likes/dislikes test sequence using random joke num = str(random.randint(0, count-1)) # test a random record responses.append( requests.get(url+num) # Get/read joke by id ) responses.append( requests.put(url+&quot;like/&quot;+num) # Put/add to like count ) responses.append( requests.put(url+&quot;jeer/&quot;+num) # Put/add to jeer count ) # Get a random joke responses.append( requests.get(url+&quot;random&quot;) # Get/read a random joke ) # Cycle through and print responses for response in responses: print(response) try: print(response.json()) except: print(&quot;data error&quot;) . &lt;Response [200]&gt; {&#39;boohoo&#39;: 78, &#39;haha&#39;: 436, &#39;id&#39;: 3, &#39;joke&#39;: &#39;Enter any 11-digit prime number to continue.&#39;} &lt;Response [200]&gt; {&#39;boohoo&#39;: 78, &#39;haha&#39;: 437, &#39;id&#39;: 3, &#39;joke&#39;: &#39;Enter any 11-digit prime number to continue.&#39;} &lt;Response [200]&gt; {&#39;boohoo&#39;: 79, &#39;haha&#39;: 437, &#39;id&#39;: 3, &#39;joke&#39;: &#39;Enter any 11-digit prime number to continue.&#39;} &lt;Response [200]&gt; {&#39;boohoo&#39;: 69, &#39;haha&#39;: 69, &#39;id&#39;: 14, &#39;joke&#39;: &#39;Q: How many programmers does it take to change a light bulb? A: None. It’s a hardware problem.&#39;} .",
            "url": "https://ryanrob327.github.io/csp/techtalk/webapi",
            "relUrl": "/techtalk/webapi",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "HTML frontend",
            "content": "code breakdown . html table: . &lt; table &gt; creates a TABLE | &lt; tr &gt; creates a ROW | &lt; th &gt; makes the text a column HEADER | &lt; tbody id = &quot;results&quot; &gt; defines an element id, to be used within JavaScript | . This code creates two tables in html that display covid statistics. . &lt;!-- HTML table fragment for page --&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Time&lt;/th&gt; &lt;th&gt;All-time Cases&lt;/th&gt; &lt;th&gt;Recorded Deaths&lt;/th&gt; &lt;th&gt;Active Cases&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;td id=&quot;time&quot;&gt;&lt;/td&gt; &lt;td id=&quot;total_cases&quot;&gt;&lt;/td&gt; &lt;td id=&quot;total_deaths&quot;&gt;&lt;/td&gt; &lt;td id=&quot;active_cases&quot;&gt;&lt;/td&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Country&lt;/th&gt; &lt;th&gt;All-time Cases&lt;/th&gt; &lt;th&gt;Recorded Deaths&lt;/th&gt; &lt;th&gt;Active Cases&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=&quot;result&quot;&gt; &lt;!-- generated rows --&gt; &lt;/tbody&gt; &lt;/table&gt; . Constant variables . This code gathers data and stores them in variables with the &quot;const&quot; keyword, &quot;const&quot; means that you cannot change the variable beyond its declaration. . Key things to know: . The document object &quot;result&quot; represents table body in the HTML above. | If you want to access any element in an HTML page in JavaScript, you always start by accessing the document object. In this case, we are accessing &quot;result&quot; and defining a &quot;resultContainer&quot; | In the code, in following cells, document elements are created and organized for each Joke, each is added to the &quot;resultContainer&quot; as a row in the table body. | Accessing the api is done using the variables url and options, this is setup to fetch the Jokes from the backend | . // prepare HTML result container for new output const resultContainer = document.getElementById(&quot;result&quot;); // prepare fetch options const url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot;; const headers = { method: &#39;GET&#39;, // *GET, POST, PUT, DELETE, etc. mode: &#39;cors&#39;, // no-cors, *cors, same-origin cache: &#39;default&#39;, // *default, no-cache, reload, force-cache, only-if-cached credentials: &#39;omit&#39;, // include, *same-origin, omit headers: { &#39;Content-Type&#39;: &#39;application/json&#39; // &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;, }, }; . Fetch . This code uses the &quot;fetch&quot; keyword to get API data and add that to the table . Key things to understand: . The &quot;url&quot; &quot;response&quot; is checked in case the site is down and returns an error | On successful fetch, the code places each Joke in the HTML table body using a &quot;for&quot; loop and creating document elements from each &quot;row&quot; of the fetched &quot;data&quot;. | The creation of each Haha and Boohoo &quot;onclick&quot; &quot;button&quot; is also done in the same loop. | Updates to backend are setup to occur with each onclick, each click calls the &quot;reaction&quot; function | . // fetch the API fetch(url, headers) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { const errorMsg = &#39;Database response error: &#39; + response.status; console.log(errorMsg); const tr = document.createElement(&quot;tr&quot;); const td = document.createElement(&quot;td&quot;); td.innerHTML = errorMsg; tr.appendChild(td); resultContainer.appendChild(tr); return; } // valid response will have json data response.json().then(data =&gt; { console.log(data); console.log(data.world_total) // World Data document.getElementById(&quot;time&quot;).innerHTML = data.world_total.statistic_taken_at; document.getElementById(&quot;total_cases&quot;).innerHTML = data.world_total.total_cases; document.getElementById(&quot;total_deaths&quot;).innerHTML = data.world_total.total_deaths; document.getElementById(&quot;active_cases&quot;).innerHTML = data.world_total.active_cases; // Country data for (const row of data.countries_stat) { console.log(row); // tr for each row const tr = document.createElement(&quot;tr&quot;); // td for each column const name = document.createElement(&quot;td&quot;); const cases = document.createElement(&quot;td&quot;); const deaths = document.createElement(&quot;td&quot;); const active = document.createElement(&quot;td&quot;); // data is specific to the API name.innerHTML = row.country_name; cases.innerHTML = row.cases; deaths.innerHTML = row.deaths; active.innerHTML = row.active_cases; // this builds td&#39;s into tr tr.appendChild(name); tr.appendChild(cases); tr.appendChild(deaths); tr.appendChild(active); // add HTML to container resultContainer.appendChild(tr); } }) }) . catch errors . This code catches errors if access to the server is blocked . // catch fetch errors (ie ACCESS to server blocked) .catch(err =&gt; { console.error(err); const tr = document.createElement(&quot;tr&quot;); const td = document.createElement(&quot;td&quot;); td.innerHTML = err; tr.appendChild(td); resultContainer.appendChild(tr); }); . full code . &lt;!-- HTML table fragment for page --&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Time&lt;/th&gt; &lt;th&gt;All-time Cases&lt;/th&gt; &lt;th&gt;Recorded Deaths&lt;/th&gt; &lt;th&gt;Active Cases&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;td id=&quot;time&quot;&gt;&lt;/td&gt; &lt;td id=&quot;total_cases&quot;&gt;&lt;/td&gt; &lt;td id=&quot;total_deaths&quot;&gt;&lt;/td&gt; &lt;td id=&quot;active_cases&quot;&gt;&lt;/td&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Country&lt;/th&gt; &lt;th&gt;All-time Cases&lt;/th&gt; &lt;th&gt;Recorded Deaths&lt;/th&gt; &lt;th&gt;Active Cases&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=&quot;result&quot;&gt; &lt;!-- generated rows --&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;!-- Script is layed out in a sequence (no function) and will execute when page is loaded --&gt; &lt;script&gt; // prepare HTML result container for new output const resultContainer = document.getElementById(&quot;result&quot;); // prepare fetch options const url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot;; const headers = { method: &#39;GET&#39;, // *GET, POST, PUT, DELETE, etc. mode: &#39;cors&#39;, // no-cors, *cors, same-origin cache: &#39;default&#39;, // *default, no-cache, reload, force-cache, only-if-cached credentials: &#39;omit&#39;, // include, *same-origin, omit headers: { &#39;Content-Type&#39;: &#39;application/json&#39; // &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;, }, }; // fetch the API fetch(url, headers) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { const errorMsg = &#39;Database response error: &#39; + response.status; console.log(errorMsg); const tr = document.createElement(&quot;tr&quot;); const td = document.createElement(&quot;td&quot;); td.innerHTML = errorMsg; tr.appendChild(td); resultContainer.appendChild(tr); return; } // valid response will have json data response.json().then(data =&gt; { console.log(data); console.log(data.world_total) // World Data document.getElementById(&quot;time&quot;).innerHTML = data.world_total.statistic_taken_at; document.getElementById(&quot;total_cases&quot;).innerHTML = data.world_total.total_cases; document.getElementById(&quot;total_deaths&quot;).innerHTML = data.world_total.total_deaths; document.getElementById(&quot;active_cases&quot;).innerHTML = data.world_total.active_cases; // Country data for (const row of data.countries_stat) { console.log(row); // tr for each row const tr = document.createElement(&quot;tr&quot;); // td for each column const name = document.createElement(&quot;td&quot;); const cases = document.createElement(&quot;td&quot;); const deaths = document.createElement(&quot;td&quot;); const active = document.createElement(&quot;td&quot;); // data is specific to the API name.innerHTML = row.country_name; cases.innerHTML = row.cases; deaths.innerHTML = row.deaths; active.innerHTML = row.active_cases; // this builds td&#39;s into tr tr.appendChild(name); tr.appendChild(cases); tr.appendChild(deaths); tr.appendChild(active); // add HTML to container resultContainer.appendChild(tr); } }) }) // catch fetch errors (ie ACCESS to server blocked) .catch(err =&gt; { console.error(err); const tr = document.createElement(&quot;tr&quot;); const td = document.createElement(&quot;td&quot;); td.innerHTML = err; tr.appendChild(td); resultContainer.appendChild(tr); }); &lt;/script&gt; .",
            "url": "https://ryanrob327.github.io/csp/HTMLfrontend",
            "relUrl": "/HTMLfrontend",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Polygon API",
            "content": "from polygon import RESTClient from typing import cast from urllib3 import HTTPResponse import time # API key for the stocks client = RESTClient(&quot;RQQmTlSXibKSclKn0R4lj2Vtmzvw1Fjv&quot;) # api key in quotes aggs = client.get_aggs(&quot;GME&quot;, 1, &quot;month&quot;, &quot;2022-01-01&quot;, &quot;2022-10-01&quot;) data = [] #for i in range (1): #data.append({&quot;2022-&quot;+str(i + 1)+&quot;-1&quot;: aggs[i].open}) #print(&quot;2022-&quot; + str(i + 1) + &quot;-1: &quot; + str(aggs[i].open)) #time.sleep(12) #print(data) . stock = input(&quot;request stock above&quot;) data = client.get_daily_open_close_agg(stock, &quot;2022-10-12&quot;) print(data.symbol) print(data.open) . GME 25.96 . i = 1 print(&quot;2022-&quot; + str(i) + &quot;-01&quot;) . 2022-1-01 . for i in range (2): data = client.get_daily_open_close_agg(&quot;GME&quot;, &quot;2022-&quot; + &quot;01&quot; + &quot;-01&quot;) i += 1 print(data.symbol) print(data.open) print(data.close) . NameError Traceback (most recent call last) /home/ryanm/vscode/csp/_notebooks/2022-10-10-Polygon-API.ipynb Cell 5 in &lt;cell line: 1&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/ryanm/vscode/csp/_notebooks/2022-10-10-Polygon-API.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; for i in range (2): -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/ryanm/vscode/csp/_notebooks/2022-10-10-Polygon-API.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; data = client.get_daily_open_close_agg(&#34;GME&#34;, &#34;2022-&#34; + &#34;01&#34; + &#34;-01&#34;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/ryanm/vscode/csp/_notebooks/2022-10-10-Polygon-API.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; i += 1 &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/ryanm/vscode/csp/_notebooks/2022-10-10-Polygon-API.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; print(data.symbol) NameError: name &#39;client&#39; is not defined . def yearly_data(stock): client = RESTClient(&quot;w4oXBFSyC3bTkpJeVwSnKt8iuwBgMeMy&quot;) # api_key is used aggs = client.get_aggs(stock, 1, &quot;month&quot;, &quot;2021-01-01&quot;, &quot;2021-12-01&quot;) data = [] for i in range (12): data.append({&quot;date&quot;: &quot;2021-&quot; +str(i + 1) + &quot;-1&quot;,&quot;open&quot;: aggs[i].open, &quot;high&quot;: aggs[i].high, &quot;low&quot;: aggs[i].low, &quot;close&quot;: aggs[i].close}) #time.sleep(12) return(data) print(yearly_data(&quot;GME&quot;)) . [{&#39;date&#39;: &#39;2021-1-1&#39;, &#39;open&#39;: 4.75, &#39;high&#39;: 120.75, &#39;low&#39;: 4.27, &#39;close&#39;: 81.25}, {&#39;date&#39;: &#39;2021-2-1&#39;, &#39;open&#39;: 79.14, &#39;high&#39;: 80.5, &#39;low&#39;: 9.625, &#39;close&#39;: 25.435}, {&#39;date&#39;: &#39;2021-3-1&#39;, &#39;open&#39;: 26.135, &#39;high&#39;: 87.125, &#39;low&#39;: 24.9925, &#39;close&#39;: 47.455}, {&#39;date&#39;: &#39;2021-4-1&#39;, &#39;open&#39;: 48.34, &#39;high&#39;: 49.2423, &#39;low&#39;: 33, &#39;close&#39;: 43.3975}, {&#39;date&#39;: &#39;2021-5-1&#39;, &#39;open&#39;: 44.3725, &#39;high&#39;: 67.2, &#39;low&#39;: 34.125, &#39;close&#39;: 55.5}, {&#39;date&#39;: &#39;2021-6-1&#39;, &#39;open&#39;: 58.37, &#39;high&#39;: 86.165, &#39;low&#39;: 49.25, &#39;close&#39;: 53.535}, {&#39;date&#39;: &#39;2021-7-1&#39;, &#39;open&#39;: 53.35, &#39;high&#39;: 54.2075, &#39;low&#39;: 39.5025, &#39;close&#39;: 40.28}, {&#39;date&#39;: &#39;2021-8-1&#39;, &#39;open&#39;: 40.5, &#39;high&#39;: 56.75, &#39;low&#39;: 36.305, &#39;close&#39;: 54.56}, {&#39;date&#39;: &#39;2021-9-1&#39;, &#39;open&#39;: 56, &#39;high&#39;: 57.8598, &#39;low&#39;: 41.6975, &#39;close&#39;: 43.8675}, {&#39;date&#39;: &#39;2021-10-1&#39;, &#39;open&#39;: 44.85, &#39;high&#39;: 48.045, &#39;low&#39;: 41.4525, &#39;close&#39;: 45.8775}, {&#39;date&#39;: &#39;2021-11-1&#39;, &#39;open&#39;: 45.6325, &#39;high&#39;: 63.9225, &#39;low&#39;: 45.5125, &#39;close&#39;: 49.0525}, {&#39;date&#39;: &#39;2021-12-1&#39;, &#39;open&#39;: 49.85, &#39;high&#39;: 50.0263, &#39;low&#39;: 32.375, &#39;close&#39;: 37.0975}] .",
            "url": "https://ryanrob327.github.io/csp/week7/2022/10/10/Polygon-API.html",
            "relUrl": "/week7/2022/10/10/Polygon-API.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Final Project Plan",
            "content": "Project Plan . We will create a program that displays information on the stock market with graphs and tables This program will take data on the stock market from the polygon.io api | The information for each graph/table will be stored in a dictionary with multiple values | you will be able to switch between different stock options to view | . | . College board criteria . 1. Program Purpose and Function . purpose . Create a web application that provides data for people when investing in the stock market function . | User selects what stock they want data for | Web application provides data in the form a graphs and a table that assist you with investing 2. Data Abstraction . | We will collect data from an api in the form of dictionaries | The data collected from the api will be used to create graphs and tables 3. Managing Complexity . | Data will be based on time(x-axis) and stock value(y-axis) 4. Procedural Abstraction . | The option to choose between different graphs and data tables and see different results | The option to compare different stocks to another on the same graph 5. Algorithm Implementation . | TBD when we go over this in class 6. Testing . | case sensitive | .",
            "url": "https://ryanrob327.github.io/csp/week7/2022/10/04/Final-Plan.html",
            "relUrl": "/week7/2022/10/04/Final-Plan.html",
            "date": " • Oct 4, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i + 1) + &quot; letter in the alphabet&quot;) i += 1 . The letter a is the 1 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 0 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count + 1) + &quot; letter in the alphabet&quot;) count += 1 . The letter a is the 1 letter in the alphabet . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 2 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt;= 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] == 0: pass elif numbers[i] % 5 == 0 or numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98, 100] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 ordering = True #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? while ordering == True: item = input(&quot;Please select an item from the menu or select &#39;done&#39;&quot;) print(item) if item == &quot;done&quot;: # checks if you are done with your order ordering = False elif item in menu: # checks if key exists in menu dictionary total += menu[item] # find any item from the dictionary and add its value to total else: print(&quot;input incorrect, please try again&quot;) # if you misspelled a word then you can re-enter the word #code should add the price of the menu items selected by the user print(&quot;your total: $&quot; + str(total)) . Menu burger $3.99 fries $1.99 drink $0.99 foot lettuce input incorrect, please try again burger drink done your total: $4.98 . Bugs/Errors . If you misspelled a word the program would encounter an error, I fixed this by adding an &quot;else&quot; statement that allows you to re-enter your order, I also had to google how to check if a key is in your dictionary to check if the key is correct. | For some reason if you order a burger fries and a drink you get charged $6.970000000000001 ## &quot;single&quot; tests | &quot;single&quot; tests on my own project I can isolate specific parts of my program and use print statements to isolate specific problems | .",
            "url": "https://ryanrob327.github.io/csp/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "JavaScript",
            "content": "| JavaScript and html Table | JavaScript Basics | API | Binary | . . function PrintType(output) { // function to output data type and data into terminal console.log(typeof output, &quot;, &quot;, output); } // define a function to hold data for a Person function Person(name, age, residence) { this.name = name; this.age = age; this.residence = residence; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, age: this.age, residence: this.residence, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable student var student = new Person(&quot;Ryan&quot;, 16, &quot;SanDiego&quot;); // object type is easy to work with in JavaScript PrintType(student); // before role PrintType(student.toJSON()); // output of Object and JSON/string associated with student student.setRole(&quot;Student&quot;); // set the role PrintType(student); PrintType(student.toJSON()); . object , Person { name: &#39;Ryan&#39;, age: 16, residence: &#39;SanDiego&#39;, role: &#39;&#39; } string , {&#34;name&#34;:&#34;Ryan&#34;,&#34;age&#34;:16,&#34;residence&#34;:&#34;SanDiego&#34;,&#34;role&#34;:&#34;&#34;} object , Person { name: &#39;Ryan&#39;, age: 16, residence: &#39;SanDiego&#39;, role: &#39;Student&#39; } string , {&#34;name&#34;:&#34;Ryan&#34;,&#34;age&#34;:16,&#34;residence&#34;:&#34;SanDiego&#34;,&#34;role&#34;:&#34;Student&#34;} . // define a student Array of Person(s) var students = [ new Person(&quot;Ryan&quot;, 16, &quot;San Diego&quot;), new Person(&quot;Josh&quot;, 16, &quot;San Diego&quot;), new Person(&quot;Eli&quot;, 16, &quot;San Diego&quot;), new Person(&quot;Jeffery&quot;, 17, &quot;San Diego&quot;) ]; var teacher = new Person(&quot;Mr. M&quot;, &quot;?&quot;, &quot;San Diego&quot;) // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom PrintType(compsci.classroom); // constructed classroom object PrintType(compsci.classroom[0].name); // abstract 1st objects name PrintType(compsci.json[0]); // show json conversion of 1st object to string PrintType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object , [ Person { name: &#39;Mr. M&#39;, age: &#39;?&#39;, residence: &#39;San Diego&#39;, role: &#39;Teacher&#39; }, Person { name: &#39;Ryan&#39;, age: 16, residence: &#39;San Diego&#39;, role: &#39;Student&#39; }, Person { name: &#39;Josh&#39;, age: 16, residence: &#39;San Diego&#39;, role: &#39;Student&#39; }, Person { name: &#39;Eli&#39;, age: 16, residence: &#39;San Diego&#39;, role: &#39;Student&#39; }, Person { name: &#39;Jeffery&#39;, age: 17, residence: &#39;San Diego&#39;, role: &#39;Student&#39; } ] string , Mr. M string , {&#34;name&#34;:&#34;Mr. M&#34;,&#34;age&#34;:&#34;?&#34;,&#34;residence&#34;:&#34;San Diego&#34;,&#34;role&#34;:&#34;Teacher&#34;} object , { name: &#39;Mr. M&#39;, age: &#39;?&#39;, residence: &#39;San Diego&#39;, role: &#39;Teacher&#39; } . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Age&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Residence&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.age + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.residence + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameAgeResidenceRole . Mr. M | ? | San Diego | Teacher | Ryan | 16 | San Diego | Student | Josh | 16 | San Diego | Student | Eli | 16 | San Diego | Student | Jeffery | 17 | San Diego | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://ryanrob327.github.io/csp/week5/2022/09/25/JavaScript-Table.html",
            "relUrl": "/week5/2022/09/25/JavaScript-Table.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Tri 1 Final Project Plan",
            "content": "Project Purpose . Meet college board criteria: . use data abstraction | use procedural abstraction | show testing | . My first idea, checkers, meets all criteria . data abstraction with a 2D array when loading the board and pieces. | procedural abstraction with how the player interacts with the screen and interacts with the pieces on the board. | . My second idea, a learning website similar to khan academy . great purpose. | needs some more thought to meet college board criteria. | . Team Roles . Ryan -&gt; scrum master | Jeffery -&gt; backend | Josh -&gt; frontend | Eli -&gt; DevOps | Chris -&gt; backend | Khalid -&gt; frontend | . Scrum Infographic . .",
            "url": "https://ryanrob327.github.io/csp/week5/2022/09/25/Final-scrum-roles.html",
            "relUrl": "/week5/2022/09/25/Final-scrum-roles.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "JavaScript",
            "content": "| JavaScript and html Table | JavaScript Basics | API | Binary | . . Console.log output . This Code cell outputs a string stored in a variable. . var text = &quot;Hello World&quot;; console.log(text); . Hello World . Function . This code cell uses a function to outputs a string. . function Print(Text) { console.log(Text); } Print(text); . Hello World . Data types . This code cell demonstrates the different data types in JavaScript by outputting them with a function. . function PrintType(output) { console.log(typeof output, &quot;, &quot;, output); } PrintType(&quot;string&quot;); PrintType(1); PrintType(true); PrintType([&quot;A&quot;,&quot;B&quot;,&quot;C&quot;]); . string , string number , 1 boolean , true object , [ &#39;A&#39;, &#39;B&#39;, &#39;C&#39; ] . Operators . var addition = 1+1; console.log(addition); var subtraction = 1-1; console.log(subtraction); var multiplication = 1*2; console.log(multiplication); var division = 1/2; console.log(division); var modulus = 3%2; // division remainder console.log(modulus); . 2 0 2 0.5 1 . Classes . function allows for gathering data, the function &quot;Person&quot; collects a name, age, residence, and role | prototype allows for associating methods to a function,the prototype &quot;setRole&quot; allows for you to change the data type &quot;role&quot; in the function &quot;Person&quot; | . // define a function to hold data for a Person function Person(name, age, residence) { this.name = name; this.age = age; this.residence = residence; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, age: this.age, residence: this.residence, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable student var student = new Person(&quot;Ryan&quot;, 16, &quot;SanDiego&quot;); // object type is easy to work with in JavaScript PrintType(student); // before role PrintType(student.toJSON()); // output of Object and JSON/string associated with student student.setRole(&quot;Student&quot;); // set the role PrintType(student); PrintType(student.toJSON()); . object , Person { name: &#39;Ryan&#39;, age: 16, residence: &#39;SanDiego&#39;, role: &#39;&#39; } string , {&#34;name&#34;:&#34;Ryan&#34;,&#34;age&#34;:16,&#34;residence&#34;:&#34;SanDiego&#34;,&#34;role&#34;:&#34;&#34;} object , Person { name: &#39;Ryan&#39;, age: 16, residence: &#39;SanDiego&#39;, role: &#39;Student&#39; } string , {&#34;name&#34;:&#34;Ryan&#34;,&#34;age&#34;:16,&#34;residence&#34;:&#34;SanDiego&#34;,&#34;role&#34;:&#34;Student&#34;} .",
            "url": "https://ryanrob327.github.io/csp/week5/2022/09/24/JavaScript.html",
            "relUrl": "/week5/2022/09/24/JavaScript.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Collaboration",
            "content": "Notes . A computing innovation includes a program as an integral part of its function. | Collaboration that includes diverse perspectives helps avoid bias in the development of computing innovations. Interpersonal skills learned through collaboration: Communication | Consensus Building | Conflict resolution | Negotiation | . | leave comments in code | ask friends and family to test programs and get feedback | . Pair Programing: . Two programmers work together as pair. One (the driver) writes program code, while the other(the observer, pointer, or navigator) reviews each line of program code as it is typed in. Think-Pair-Share: | Students think through a problem alone, pair with a partner to share ideas, and then share results with the class. | . MC . What are the benefits of collaborating with your peers? . Effective collaboration produces a computing innovation that reflects the diversity of talents and perspectives of those who designed it. |",
            "url": "https://ryanrob327.github.io/csp/week4/2022/09/19/Colaboration.html",
            "relUrl": "/week4/2022/09/19/Colaboration.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Psychology of Happiness",
            "content": "Vocabulary . Circumstances . if you win the lottery you may only be happy for a few weeks or months nut it is not permanent happiness | By the time you make $75,000 annually more money will stop making you happy Effort . | it takes work to change your life and be happier | exercising once doesn’t mke you stronger, you have to exercise every day Illusions . | We often forecast that something will make us happy when it really won’t, our mind is lying to us Social connections . | Prioritize other people | Spend time talking to strangers | Help others to help yourself Gratitude . | Instead of thinking about all of the negative things in life, think of the positive things | Write down good things on paper Health . | Get plenty of sleep, 7+ hours | Exercise every day, 30+ mins Moment . | Spend time in the present moment | Pay attention to what you are doing, invest in what you are doing Time . | Time Affluence | Time Famine | Value time more than money | . Note of Gratitude . Short letter written to my close friend, Sammy. . Hi Sammy, you are a great friend, I appreciate that every day you walk to and from school with me. I have noticed that you act like a natural leader, especially in marching band where I am glad to work with you as a section leader. I enjoy hanging out with you, like on saturday when we went to karaoke together I had a blast and it was awesome being with you. . Gratitude List . Very little homework on Wednesday, time to relax. | Marine band played for the marching band before the football game on Friday and we got a chance to ask the marines about their job. | Fly over during the national anthem at football game. | Karaoke with band leadership on Saturday. | . Goals . Get an A on upcoming Calc quiz | Put up stage for marching band | Go to lunch with friends Monday | Try time some management skills to have more time to myself (time how long it takes to do homework for better reference next time) | .",
            "url": "https://ryanrob327.github.io/csp/week4/2022/09/18/Focus-and-Habits.html",
            "relUrl": "/week4/2022/09/18/Focus-and-Habits.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "App Lab",
            "content": "Design . Purpose . To create a quiz and a plan that demonstrates our understanding of the content we have learned this week Functionality . | Have three questions | Each question is a different type Button question (one answer) | Input question | check box question (multiple answers) | . | Score will be kept and shown at the end | Topic will be about AP comp sci Description . Input . | The quiz will ask a question and the user will input an answer to the question Output . | The quiz will score you after each question and change the screen if you got the question correct | . Success . Button question . . This code allows you to select a button and if the button is correct, the program keeps score and the screen changes to the next question. | This code works by detecting if the correct button is pressed and changing the score and the screen. | . Input question . . This code allows you to input your answer and if your answer is correct, the program keeps score and continues to the next screen. | This code works when the “continue” button is pressed by getting the text from the input and if the text is the same as the answer then the score is kept and changing the screen. | . Checkbox question . . This code allows you to select multiple answers at once and if all of your selections are correct, the program keeps score and continues to the final screen. | This code works when the “continue” button is pressed, if both of the proper options are selected then the score is kept and the screen is changed. | . Final screen . . This code shows your score at the end of the quiz. | This code works when the “score button” is pressed by changing the text of the score button to the amount of points you have. | . Challenges . One silly challenge that I ran into was because I was redeclaring the variable “score” every time I changed its value, as a result, the final score kept showing up as zero. | Another challenge I ran into was getting the text from the input box but I was able to look at the documentation on code.org to figure this out. | . See my project here .",
            "url": "https://ryanrob327.github.io/csp/week3/2022/09/08/App-Lab.html",
            "relUrl": "/week3/2022/09/08/App-Lab.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Class Notes",
            "content": "Week 1 . 1. Marching band . got through first part of movt. 1 | to do: update metronome for second part of movt. 1 | prop building labour day weekend | . | . 2. AP Calculus AB . learned limits | turned in summer assignment | to do: study for quiz on tuesday | quiz will include limits and topics from summer assignment | . | . 3. AP Computer Science Principles . learned python | learned bash | to do: make issue, post on review ticket | . | . 4. Concert Band(Brass) . learned stand tunes for football games | to do: practice music for first part of movt. 1 | practice scales for scale test on tuesday | prepare for audition next week | . | . 5. English . reviewed “The New Colossus” poem | began writing my own poem | to do: finish writing my own poem | . | . Week 2 .   1. Marching band 2. AP cluculus 3. AP computer science 4. Concert band(brass) 5. English . Completed | Got through 9 new sets | Took quiz, did alright | learned data abtstraction, HTML fragments | Got through second part of movt. 1 | Went to library, picked up Persepolis | . ToDo | Prepare for Poway Days parade | Study for test this week | Performance task drafting, create applab | Practice for auditions this week | TBD | .",
            "url": "https://ryanrob327.github.io/csp/week1/2022/09/05/Class-Notes.html",
            "relUrl": "/week1/2022/09/05/Class-Notes.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Python_List_Demonstration",
            "content": "InfoDb . Arrays or lists are very useful for storing information in an organized format. InfoDb is an array with information like names, date of birth, residence, cars, favorite shows, and favorite games. &quot;.append&quot; is adding the information in parentheses to InfoDb. . InfoDb = [] # To add data to InfoDB we must use the .append function # A dictionary is made with curly braces {} InfoDb.append({ &quot;FirstName&quot;: &quot;Joshua&quot;, &quot;MiddleName&quot;: &quot;Benjamin&quot;, &quot;LastName&quot;: &quot;Williams&quot;, &quot;DOB&quot;: &quot;January 6&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Owns_Cars&quot;: &quot;2011 Nissan Versa&quot;, &quot;Show&quot;: &quot;SpongeBob&quot;, &quot;Game&quot;: &quot;Apex Legends&quot; }) InfoDb.append({ &quot;FirstName&quot;: &quot;Ryan&quot;, &quot;MiddleName&quot;: &quot;Robert&quot;, &quot;LastName&quot;: &quot;McWeeny&quot;, &quot;DOB&quot;: &quot;March 27&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;ryanrob327@gmail.com&quot;, &quot;Owns_Cars&quot;: &quot;2016 GMC Acadia&quot;, &quot;Show&quot;: &quot;SpongeBob&quot;, &quot;Game&quot;: &quot;Minecraft&quot; }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;Joshua&#39;, &#39;MiddleName&#39;: &#39;Benjamin&#39;, &#39;LastName&#39;: &#39;Williams&#39;, &#39;DOB&#39;: &#39;January 6&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Owns_Cars&#39;: &#39;2011 Nissan Versa&#39;, &#39;Show&#39;: &#39;SpongeBob&#39;, &#39;Game&#39;: &#39;Apex Legends&#39;}, {&#39;FirstName&#39;: &#39;Ryan&#39;, &#39;MiddleName&#39;: &#39;Robert&#39;, &#39;LastName&#39;: &#39;McWeeny&#39;, &#39;DOB&#39;: &#39;March 27&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;ryanrob327@gmail.com&#39;, &#39;Owns_Cars&#39;: &#39;2016 GMC Acadia&#39;, &#39;Show&#39;: &#39;SpongeBob&#39;, &#39;Game&#39;: &#39;Minecraft&#39;}] . Reversed list . This block of code flips the order of a list and prints the flipped list using &quot;.reverse()&quot; a function built into python that reverses the order of a list. . list = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;] print(&#39;Regular List:&#39;, list) list.reverse() print(&#39;Reversed List:&#39;, list) . Regular List: [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;] Reversed List: [&#39;6&#39;, &#39;5&#39;, &#39;4&#39;, &#39;3&#39;, &#39;2&#39;, &#39;1&#39;] . Random list . This block of code randomizes the order of a list and prints the randomized list using &quot;random.shuffle()&quot; a function from the random module built into python. . import random print(&#39;Regular List:&#39;, list) random.shuffle(list) print(&#39;Random List:&#39;, list) . Regular List: [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;] Random List: [&#39;3&#39;, &#39;5&#39;, &#39;1&#39;, &#39;2&#39;, &#39;4&#39;, &#39;6&#39;] . For Loop . This is an example of printing the data from infoDb using a for loop, it repeats as many times as there are indices in InfoDb printing the result every loop. . def print_data(d_rec): # defines function that prints data print(d_rec[&quot;FirstName&quot;], d_rec[&quot;MiddleName&quot;], d_rec[&quot;LastName&quot;]) # prints data from the dictionary print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, d_rec[&quot;Owns_Cars&quot;]) # end=&quot;&quot; make sure no return occurs print(&quot; t&quot;, &quot;Favorite show: &quot;, d_rec[&quot;Show&quot;]) print(&quot; t&quot;, &quot;Favorite game: &quot;, d_rec[&quot;Game&quot;]) # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Joshua Benjamin Williams Residence: San Diego Birth Day: January 6 Cars: 2011 Nissan Versa Favorite show: SpongeBob Favorite game: Apex Legends Ryan Robert McWeeny Residence: San Diego Birth Day: March 27 Cars: 2016 GMC Acadia Favorite show: SpongeBob Favorite game: Minecraft . While loop . This block of code prints data from infoDb using a while loop, while i is less than the length of InfoDb i iterates through InfoDb printing the result every loop. . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output Joshua Benjamin Williams Residence: San Diego Birth Day: January 6 Cars: 2011 Nissan Versa Favorite show: SpongeBob Favorite game: Apex Legends Ryan Robert McWeeny Residence: San Diego Birth Day: March 27 Cars: 2016 GMC Acadia Favorite show: SpongeBob Favorite game: Minecraft . Recersive Loop . This is a block of code that uses a repeating function to iterate through InfoDb and print the result. This function always calls itself after executing so that it can execute again, this process is called recursion. . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Joshua Benjamin Williams Residence: San Diego Birth Day: January 6 Cars: 2011 Nissan Versa Favorite show: SpongeBob Favorite game: Apex Legends Ryan Robert McWeeny Residence: San Diego Birth Day: March 27 Cars: 2016 GMC Acadia Favorite show: SpongeBob Favorite game: Minecraft . Quiz . This is a quiz made using dictionaries and lists, it is made so that there is no repeating code. This quiz keeps track of your score every time you enter an answer and tells you if it is write or wrong. . question = [] # creates empty list question.append({ # adds dictionary with question and answer to list using .append &quot;Question&quot;: &quot;what is the fastest plane in the world&quot;, &quot;Answer&quot;: &quot;SR-71&quot;, }) question.append({ &quot;Question&quot;: &quot;what is the hightest flying plane in the world&quot;, &quot;Answer&quot;: &quot;X-15&quot;, }) question.append({ &quot;Question&quot;: &quot;what is the largest plane in the world&quot;, &quot;Answer&quot;: &quot;An-225&quot;, }) question.append({ &quot;Question&quot;: &quot;what is the smallest plane in the world&quot;, &quot;Answer&quot;: &quot;BD-5J&quot;, }) points = 0 print(&quot;Take this quiz about planes.&quot;) for i in question: # for loop repeats every time an answer is given print(i[&quot;Question&quot;]) response = input(i[&quot;Question&quot;]) print(response) if response == i[&quot;Answer&quot;]: points += 1 print(&quot;Correct, you have &quot;, points, &quot; points!&quot;) else: print(&quot;Incorrect, the answer was; &quot;, i[&quot;Answer&quot;]) print(&quot;You have finished the quiz with &quot;, points, &quot; out of &quot;, len(question), &quot; points!&quot;) . Take this quiz about planes. what is the fastest plane in the world SR-71 Correct, you have 1 points! what is the hightest flying plane in the world X-15 Correct, you have 2 points! what is the largest plane in the world U-2 Incorrect, the answer was; An-225 what is the smallest plane in the world BD-5J Correct, you have 3 points! You have finished the quiz with 3 out of 4 points! .",
            "url": "https://ryanrob327.github.io/csp/python/week2/2022/08/30/Python_Lists.html",
            "relUrl": "/python/week2/2022/08/30/Python_Lists.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Python Quiz",
            "content": "question = [&quot;what is the fastest plane in the world&quot;, &quot;what is the hightest flying plane in the world&quot;, &quot;what is the largest plane in the world&quot;, &quot;what is the smallest plane in the world&quot;] answer = [&quot;SR-71&quot;, &quot;X-15&quot;, &quot;An-225&quot;, &quot;BD-5J&quot;] points = 0 print(&quot;Take this quiz about planes.&quot;) for i in range(len(question)): print(question[i]) response = input() print(response) if response == answer[i]: points += 1 print(&quot;Correct, you have &quot;, points, &quot; points!&quot;) else: print(&quot;Incorrect, the answer was; &quot;, answer[i]) print(&quot;You have finished the quiz with &quot;, points, &quot; out of &quot;, len(question), &quot; points!&quot;) . Take this quiz about planes. what is the fastest plane in the world SR-71 Correct, you have 1 points! what is the hightest flying plane in the world X-15 Correct, you have 2 points! what is the largest plane in the world U-2 Incorrect, the answer was; An-225 what is the smallest plane in the world BD-5J Correct, you have 3 points! You have finished the quiz with 3 out of 4 points! .",
            "url": "https://ryanrob327.github.io/csp/python/week1/2022/08/28/Python-Quiz.html",
            "relUrl": "/python/week1/2022/08/28/Python-Quiz.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "Bash notebook",
            "content": "echo &quot;version check&quot; python --version python2 --version python3 --version . version check Python 3.9.12 Python 2.7.18 Python 3.9.12 . echo &quot;check conda packages&quot; conda list . check conda packages # packages in environment at /home/ryanm/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.4.0 ipykernel : 6.15.1 ipywidgets : not installed jupyter_client : 7.3.4 jupyter_core : 4.11.1 jupyter_server : not installed jupyterlab : not installed nbclient : not installed nbconvert : not installed nbformat : not installed notebook : not installed qtconsole : not installed traitlets : 5.3.0 Available kernels: bash /home/ryanm/.local/share/jupyter/kernels/bash javascript /home/ryanm/.local/share/jupyter/kernels/javascript python3 /home/ryanm/.local/share/jupyter/kernels/python3 . echo &quot;jupyter check&quot; test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . jupyter check python3 /home/ryanm/.local/share/jupyter/kernels/python3 .",
            "url": "https://ryanrob327.github.io/csp/week1/2022/08/25/Bash-notebook.html",
            "relUrl": "/week1/2022/08/25/Bash-notebook.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "First notebook",
            "content": "Print(&quot;Hello World&quot;) .",
            "url": "https://ryanrob327.github.io/csp/week0/2022/08/21/notebook.html",
            "relUrl": "/week0/2022/08/21/notebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "First Markdown",
            "content": "First markdown post . This is a sub heading . This is a description . one two three four | . | . | . | . Example of an image . . A guessing game that I made with python . import random value = random.randint(1, 100) guess = int(input(&quot;Guess a number between 1 and 100&quot;)) while value != guess: if guess &lt; value: print(&quot;too low&quot;) guess = int(input(&quot;Guess a number between 1 and 100&quot;)) elif guess &gt; value: print(&quot;too high&quot;) guess = int(input(&quot;Guess a number between 1 and 100&quot;)) print(&quot;correct!&quot;) .",
            "url": "https://ryanrob327.github.io/csp/week0/2022/08/21/markdown.html",
            "relUrl": "/week0/2022/08/21/markdown.html",
            "date": " • Aug 21, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "CB Assignments",
          "content": "Week 6 . . Problems I had . On question 3 I incorrectly selected D, I thought that the app would find Alejandra’s location useful considering it could find a restaurant near her, personally, I think this was a bad question but maybe I am just salty. | On question 5 I incorrectly answered A, the difference was that one answer talks about iterating through all elements and the other talks about iterating through all subsequent elements. . | On question 3 I incorrectly selected D, I thought that the values of J and K are replaced but they are actually copied. | . Week 7 . . Problems I had . None, all questions correct | . Week 8 . . Final Exam . . Corrections . This problem was supposed to charge customers $5 per unit until they reach 25 units at which point it charges $7 per unit. I incorrectly chose an answer that only charged for units after the 25 marker. | . | This problem was supposed to set the score of a video game to 30 if time &gt; 120 and 50 otherwise Of the two answers I incorrectly chose one that set the answer to 50 regardless of the score by setting the score to 50 after the if statement. The correct answer is to set the score to 50 before the if statement. | . | This problem was supposed to append all even numbers under 10 to a list by iterating through a for loop My mistake was iterating(i + 1) before appending even numbers to the list rather than after. | . | This problem was supposed to switch values of two integers. I incorrectly chose the option that switches both variables to the same value as the first variable, this could have easily been avoided if I reviewed my answer. | . | This problem was the same as the last, it was supposed to switch the value of two strings. Same as before, I incorrectly chose the option that set both variables to the value of the first variable, I copied the same thought process as the previous question and did not review my answer. | . | This problem was about if else statements, by checking if certain numbers are greater than each other and adding or subtracting them. In this problem I did not take into account the changes made in the first if-else statement when I solved the second if statement, having a document or a piece of paper to keep these numbers stored would have helped me remember. | . | This problem iterated through i 5 times, adding i to the overall result every time I incorrectly chose that the result would be 6 because I thought the question was asking about the value of i | . | This problem took a first name and a last name and was supposed to return the initials using the concat() and Prefix() methods. I incorrectly switched the order of “prefix()” and “concat()” so that my answer would have only returned the initial of the last name, this was another silly mistake that could have been avoided if I reviewed my answer and took my time and the test. | . | Overview . In retrospect a lot of my mistakes were very simple and could have easily been prevented by taking more time and reviewing my answers. Although for the AP test since I don’t have much time I will also need to do more review. Almost all of my missed answers were on easy questions that I should have been able to answer in seconds I reviewed all of the college board material before hand. . For the final next trimester and the AP test I will be sure to review all college board material before taking the test and review all of my answers before submission. .",
          "url": "https://ryanrob327.github.io/csp/_pages/03_college-board-proof.html",
          "relUrl": "/_pages/03_college-board-proof.html",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "About Me",
          "content": "Hi! My name is Ryan I like coding in Python and I am excited for AP computer science this year. .",
          "url": "https://ryanrob327.github.io/csp/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
      ,"page9": {
          "title": "Vocab",
          "content": "tools and equipment . Fastpages . An open source blogging tool with support for Jupyter notebook, markdown, and docs | . File types . .md: used to create web pages | .html: similar to .md files, however, .html is more difficult to use but allows for more effects than .md | .ipynb: jupyter notebook uses python and .md in conjunction | . VS code . Code editor optimized for building and debugging web applications | . WSL . The Windows Subsystem for Linux allows you to run a Linux file system and command line directly on Windows. | . Ubuntu . Operating system for linux, used alongside WSL | . Bash . Command language written for unix shell | . Github . Where code can be stored on the web, used to clone, push, or pull changes in your code | . Json . Text based format used for transferring data | . EC2 . allows computing capacity in the amazon cloud servers | . DNS . Domain Name System is like the phonebook of the internet where you can access all domain names | . Nginx . open source web server that can be used for a multitude of tasks | . Unit 2 . Bits, bytes, hexadecimals and nibbles: various ways to store data using 1’s and 0’s . Binary numbers: integers are whole numbers and floating points are decimals, both are meant to reduce data consumption . Binary Data Abstractions: various ways binary data is represented in code . Data Compression: storing data in a way to reduce it’s size . Unit 3 . Variables, Data Types, Assignment Operators: ways to store data and make calculations in code . Managing Complexity with Variables: ways to store large amounts of data in code . Algorithms, Sequence, Selection, Iteration: ways to edit data and do stuff with it . Expressions, Comparison Operators, Truth Tables: ways to represent logic in code . Characters, Strings, Length, Concatenation, Upper, Lower, Traversing Strings: data types that have to do with characters as opposed to numbers . Python If, Elif, Else conditionals; Nested Selection Statements: basic conditionals that make for basic logic in code . Python For, While loops with Range, with List: loops that allow for repeating certain processes . Documentation: Text that explains the what, how, or why of your code. | Libraries: A collection of prewritten code or procedures that coders can use to maximize their efficiency. | Application Programming Interface: A type of software through several computers are able to communicate information amongst each other. | Simulation: simpler abstraction of a complicated natural phenomena | Experiment: done in the real world and provide actual results | Procedure - named group of programming instructions that may have parameters and return values. | Parameters - input values of a procedure. | Modularity - the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program. | .",
          "url": "https://ryanrob327.github.io/csp/vocab/",
          "relUrl": "/vocab/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  

  

  

  
  

  
      ,"page17": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ryanrob327.github.io/csp/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}